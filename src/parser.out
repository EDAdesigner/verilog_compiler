Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    DOT
    LBRACE
    LBRACKET
    RBRACE
    RBRACKET
    REG
    TIMES

Grammar

Rule 0     S' -> module_definition
Rule 1     module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE
Rule 2     port_list -> port_list_items
Rule 3     port_list_items -> ID
Rule 4     port_list_items -> port_list_items COMMA ID
Rule 5     module_items -> module_item
Rule 6     module_items -> module_items module_item
Rule 7     module_items -> empty
Rule 8     module_item -> input_declaration
Rule 9     module_item -> output_declaration
Rule 10    module_item -> wire_declaration
Rule 11    module_item -> assign_statement
Rule 12    module_item -> gate_instantiation
Rule 13    input_declaration -> INPUT input_list SEMICOLON
Rule 14    input_list -> ID
Rule 15    input_list -> input_list COMMA ID
Rule 16    output_declaration -> OUTPUT ID SEMICOLON
Rule 17    wire_declaration -> WIRE wire_list SEMICOLON
Rule 18    wire_list -> ID
Rule 19    wire_list -> wire_list COMMA ID
Rule 20    assign_statement -> ASSIGN ID EQUALS expression SEMICOLON
Rule 21    expression -> term
Rule 22    expression -> expression PLUS term
Rule 23    expression -> expression MINUS term
Rule 24    expression -> expression AMPERSAND term
Rule 25    expression -> expression BAR term
Rule 26    expression -> expression CARET term
Rule 27    expression -> term QUESTION expression COLON expression
Rule 28    term -> ID
Rule 29    term -> NUMBER
Rule 30    term -> LPAREN expression RPAREN
Rule 31    term -> TILDE term
Rule 32    empty -> <empty>
Rule 33    gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON
Rule 34    gate_type -> AND
Rule 35    gate_type -> OR
Rule 36    gate_type -> NOT
Rule 37    gate_type -> NAND
Rule 38    gate_type -> NOR
Rule 39    gate_type -> XOR
Rule 40    gate_type -> XNOR
Rule 41    gate_type -> BUF
Rule 42    signal_list -> ID
Rule 43    signal_list -> signal_list COMMA ID

Terminals, with rules where they appear

AMPERSAND            : 24
AND                  : 34
ASSIGN               : 20
BAR                  : 25
BUF                  : 41
CARET                : 26
COLON                : 27
COMMA                : 4 15 19 43
DIVIDE               : 
DOT                  : 
ENDMODULE            : 1
EQUALS               : 20
ID                   : 1 3 4 14 15 16 18 19 20 28 33 42 43
INPUT                : 13
LBRACE               : 
LBRACKET             : 
LPAREN               : 1 30 33
MINUS                : 23
MODULE               : 1
NAND                 : 37
NOR                  : 38
NOT                  : 36
NUMBER               : 29
OR                   : 35
OUTPUT               : 16
PLUS                 : 22
QUESTION             : 27
RBRACE               : 
RBRACKET             : 
REG                  : 
RPAREN               : 1 30 33
SEMICOLON            : 1 13 16 17 20 33
TILDE                : 31
TIMES                : 
WIRE                 : 17
XNOR                 : 40
XOR                  : 39
error                : 

Nonterminals, with rules where they appear

assign_statement     : 11
empty                : 7
expression           : 20 22 23 24 25 26 27 27 30
gate_instantiation   : 12
gate_type            : 33
input_declaration    : 8
input_list           : 13 15
module_definition    : 0
module_item          : 5 6
module_items         : 1 6
output_declaration   : 9
port_list            : 1
port_list_items      : 2 4
signal_list          : 33 43
term                 : 21 22 23 24 25 26 27 31
wire_declaration     : 10
wire_list            : 17 19

Parsing method: LALR

state 0

    (0) S' -> . module_definition
    (1) module_definition -> . MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    MODULE          shift and go to state 2

    module_definition              shift and go to state 1

state 1

    (0) S' -> module_definition .



state 2

    (1) module_definition -> MODULE . ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    ID              shift and go to state 3


state 3

    (1) module_definition -> MODULE ID . LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    LPAREN          shift and go to state 4


state 4

    (1) module_definition -> MODULE ID LPAREN . port_list RPAREN SEMICOLON module_items ENDMODULE
    (2) port_list -> . port_list_items
    (3) port_list_items -> . ID
    (4) port_list_items -> . port_list_items COMMA ID

    ID              shift and go to state 5

    port_list                      shift and go to state 6
    port_list_items                shift and go to state 7

state 5

    (3) port_list_items -> ID .

    COMMA           reduce using rule 3 (port_list_items -> ID .)
    RPAREN          reduce using rule 3 (port_list_items -> ID .)


state 6

    (1) module_definition -> MODULE ID LPAREN port_list . RPAREN SEMICOLON module_items ENDMODULE

    RPAREN          shift and go to state 8


state 7

    (2) port_list -> port_list_items .
    (4) port_list_items -> port_list_items . COMMA ID

    RPAREN          reduce using rule 2 (port_list -> port_list_items .)
    COMMA           shift and go to state 9


state 8

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN . SEMICOLON module_items ENDMODULE

    SEMICOLON       shift and go to state 10


state 9

    (4) port_list_items -> port_list_items COMMA . ID

    ID              shift and go to state 11


state 10

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON . module_items ENDMODULE
    (5) module_items -> . module_item
    (6) module_items -> . module_items module_item
    (7) module_items -> . empty
    (8) module_item -> . input_declaration
    (9) module_item -> . output_declaration
    (10) module_item -> . wire_declaration
    (11) module_item -> . assign_statement
    (12) module_item -> . gate_instantiation
    (32) empty -> .
    (13) input_declaration -> . INPUT input_list SEMICOLON
    (16) output_declaration -> . OUTPUT ID SEMICOLON
    (17) wire_declaration -> . WIRE wire_list SEMICOLON
    (20) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON
    (33) gate_instantiation -> . gate_type ID LPAREN signal_list RPAREN SEMICOLON
    (34) gate_type -> . AND
    (35) gate_type -> . OR
    (36) gate_type -> . NOT
    (37) gate_type -> . NAND
    (38) gate_type -> . NOR
    (39) gate_type -> . XOR
    (40) gate_type -> . XNOR
    (41) gate_type -> . BUF

  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NAND resolved as shift
  ! shift/reduce conflict for NOR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for BUF resolved as shift
    ENDMODULE       reduce using rule 32 (empty -> .)
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    WIRE            shift and go to state 22
    ASSIGN          shift and go to state 23
    AND             shift and go to state 25
    OR              shift and go to state 26
    NOT             shift and go to state 27
    NAND            shift and go to state 28
    NOR             shift and go to state 29
    XOR             shift and go to state 30
    XNOR            shift and go to state 31
    BUF             shift and go to state 32

  ! INPUT           [ reduce using rule 32 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 32 (empty -> .) ]
  ! WIRE            [ reduce using rule 32 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 32 (empty -> .) ]
  ! AND             [ reduce using rule 32 (empty -> .) ]
  ! OR              [ reduce using rule 32 (empty -> .) ]
  ! NOT             [ reduce using rule 32 (empty -> .) ]
  ! NAND            [ reduce using rule 32 (empty -> .) ]
  ! NOR             [ reduce using rule 32 (empty -> .) ]
  ! XOR             [ reduce using rule 32 (empty -> .) ]
  ! XNOR            [ reduce using rule 32 (empty -> .) ]
  ! BUF             [ reduce using rule 32 (empty -> .) ]

    module_items                   shift and go to state 12
    module_item                    shift and go to state 13
    empty                          shift and go to state 14
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17
    assign_statement               shift and go to state 18
    gate_instantiation             shift and go to state 19
    gate_type                      shift and go to state 24

state 11

    (4) port_list_items -> port_list_items COMMA ID .

    COMMA           reduce using rule 4 (port_list_items -> port_list_items COMMA ID .)
    RPAREN          reduce using rule 4 (port_list_items -> port_list_items COMMA ID .)


state 12

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items . ENDMODULE
    (6) module_items -> module_items . module_item
    (8) module_item -> . input_declaration
    (9) module_item -> . output_declaration
    (10) module_item -> . wire_declaration
    (11) module_item -> . assign_statement
    (12) module_item -> . gate_instantiation
    (13) input_declaration -> . INPUT input_list SEMICOLON
    (16) output_declaration -> . OUTPUT ID SEMICOLON
    (17) wire_declaration -> . WIRE wire_list SEMICOLON
    (20) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON
    (33) gate_instantiation -> . gate_type ID LPAREN signal_list RPAREN SEMICOLON
    (34) gate_type -> . AND
    (35) gate_type -> . OR
    (36) gate_type -> . NOT
    (37) gate_type -> . NAND
    (38) gate_type -> . NOR
    (39) gate_type -> . XOR
    (40) gate_type -> . XNOR
    (41) gate_type -> . BUF

    ENDMODULE       shift and go to state 33
    INPUT           shift and go to state 20
    OUTPUT          shift and go to state 21
    WIRE            shift and go to state 22
    ASSIGN          shift and go to state 23
    AND             shift and go to state 25
    OR              shift and go to state 26
    NOT             shift and go to state 27
    NAND            shift and go to state 28
    NOR             shift and go to state 29
    XOR             shift and go to state 30
    XNOR            shift and go to state 31
    BUF             shift and go to state 32

    module_item                    shift and go to state 34
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17
    assign_statement               shift and go to state 18
    gate_instantiation             shift and go to state 19
    gate_type                      shift and go to state 24

state 13

    (5) module_items -> module_item .

    ENDMODULE       reduce using rule 5 (module_items -> module_item .)
    INPUT           reduce using rule 5 (module_items -> module_item .)
    OUTPUT          reduce using rule 5 (module_items -> module_item .)
    WIRE            reduce using rule 5 (module_items -> module_item .)
    ASSIGN          reduce using rule 5 (module_items -> module_item .)
    AND             reduce using rule 5 (module_items -> module_item .)
    OR              reduce using rule 5 (module_items -> module_item .)
    NOT             reduce using rule 5 (module_items -> module_item .)
    NAND            reduce using rule 5 (module_items -> module_item .)
    NOR             reduce using rule 5 (module_items -> module_item .)
    XOR             reduce using rule 5 (module_items -> module_item .)
    XNOR            reduce using rule 5 (module_items -> module_item .)
    BUF             reduce using rule 5 (module_items -> module_item .)


state 14

    (7) module_items -> empty .

    ENDMODULE       reduce using rule 7 (module_items -> empty .)
    INPUT           reduce using rule 7 (module_items -> empty .)
    OUTPUT          reduce using rule 7 (module_items -> empty .)
    WIRE            reduce using rule 7 (module_items -> empty .)
    ASSIGN          reduce using rule 7 (module_items -> empty .)
    AND             reduce using rule 7 (module_items -> empty .)
    OR              reduce using rule 7 (module_items -> empty .)
    NOT             reduce using rule 7 (module_items -> empty .)
    NAND            reduce using rule 7 (module_items -> empty .)
    NOR             reduce using rule 7 (module_items -> empty .)
    XOR             reduce using rule 7 (module_items -> empty .)
    XNOR            reduce using rule 7 (module_items -> empty .)
    BUF             reduce using rule 7 (module_items -> empty .)


state 15

    (8) module_item -> input_declaration .

    ENDMODULE       reduce using rule 8 (module_item -> input_declaration .)
    INPUT           reduce using rule 8 (module_item -> input_declaration .)
    OUTPUT          reduce using rule 8 (module_item -> input_declaration .)
    WIRE            reduce using rule 8 (module_item -> input_declaration .)
    ASSIGN          reduce using rule 8 (module_item -> input_declaration .)
    AND             reduce using rule 8 (module_item -> input_declaration .)
    OR              reduce using rule 8 (module_item -> input_declaration .)
    NOT             reduce using rule 8 (module_item -> input_declaration .)
    NAND            reduce using rule 8 (module_item -> input_declaration .)
    NOR             reduce using rule 8 (module_item -> input_declaration .)
    XOR             reduce using rule 8 (module_item -> input_declaration .)
    XNOR            reduce using rule 8 (module_item -> input_declaration .)
    BUF             reduce using rule 8 (module_item -> input_declaration .)


state 16

    (9) module_item -> output_declaration .

    ENDMODULE       reduce using rule 9 (module_item -> output_declaration .)
    INPUT           reduce using rule 9 (module_item -> output_declaration .)
    OUTPUT          reduce using rule 9 (module_item -> output_declaration .)
    WIRE            reduce using rule 9 (module_item -> output_declaration .)
    ASSIGN          reduce using rule 9 (module_item -> output_declaration .)
    AND             reduce using rule 9 (module_item -> output_declaration .)
    OR              reduce using rule 9 (module_item -> output_declaration .)
    NOT             reduce using rule 9 (module_item -> output_declaration .)
    NAND            reduce using rule 9 (module_item -> output_declaration .)
    NOR             reduce using rule 9 (module_item -> output_declaration .)
    XOR             reduce using rule 9 (module_item -> output_declaration .)
    XNOR            reduce using rule 9 (module_item -> output_declaration .)
    BUF             reduce using rule 9 (module_item -> output_declaration .)


state 17

    (10) module_item -> wire_declaration .

    ENDMODULE       reduce using rule 10 (module_item -> wire_declaration .)
    INPUT           reduce using rule 10 (module_item -> wire_declaration .)
    OUTPUT          reduce using rule 10 (module_item -> wire_declaration .)
    WIRE            reduce using rule 10 (module_item -> wire_declaration .)
    ASSIGN          reduce using rule 10 (module_item -> wire_declaration .)
    AND             reduce using rule 10 (module_item -> wire_declaration .)
    OR              reduce using rule 10 (module_item -> wire_declaration .)
    NOT             reduce using rule 10 (module_item -> wire_declaration .)
    NAND            reduce using rule 10 (module_item -> wire_declaration .)
    NOR             reduce using rule 10 (module_item -> wire_declaration .)
    XOR             reduce using rule 10 (module_item -> wire_declaration .)
    XNOR            reduce using rule 10 (module_item -> wire_declaration .)
    BUF             reduce using rule 10 (module_item -> wire_declaration .)


state 18

    (11) module_item -> assign_statement .

    ENDMODULE       reduce using rule 11 (module_item -> assign_statement .)
    INPUT           reduce using rule 11 (module_item -> assign_statement .)
    OUTPUT          reduce using rule 11 (module_item -> assign_statement .)
    WIRE            reduce using rule 11 (module_item -> assign_statement .)
    ASSIGN          reduce using rule 11 (module_item -> assign_statement .)
    AND             reduce using rule 11 (module_item -> assign_statement .)
    OR              reduce using rule 11 (module_item -> assign_statement .)
    NOT             reduce using rule 11 (module_item -> assign_statement .)
    NAND            reduce using rule 11 (module_item -> assign_statement .)
    NOR             reduce using rule 11 (module_item -> assign_statement .)
    XOR             reduce using rule 11 (module_item -> assign_statement .)
    XNOR            reduce using rule 11 (module_item -> assign_statement .)
    BUF             reduce using rule 11 (module_item -> assign_statement .)


state 19

    (12) module_item -> gate_instantiation .

    ENDMODULE       reduce using rule 12 (module_item -> gate_instantiation .)
    INPUT           reduce using rule 12 (module_item -> gate_instantiation .)
    OUTPUT          reduce using rule 12 (module_item -> gate_instantiation .)
    WIRE            reduce using rule 12 (module_item -> gate_instantiation .)
    ASSIGN          reduce using rule 12 (module_item -> gate_instantiation .)
    AND             reduce using rule 12 (module_item -> gate_instantiation .)
    OR              reduce using rule 12 (module_item -> gate_instantiation .)
    NOT             reduce using rule 12 (module_item -> gate_instantiation .)
    NAND            reduce using rule 12 (module_item -> gate_instantiation .)
    NOR             reduce using rule 12 (module_item -> gate_instantiation .)
    XOR             reduce using rule 12 (module_item -> gate_instantiation .)
    XNOR            reduce using rule 12 (module_item -> gate_instantiation .)
    BUF             reduce using rule 12 (module_item -> gate_instantiation .)


state 20

    (13) input_declaration -> INPUT . input_list SEMICOLON
    (14) input_list -> . ID
    (15) input_list -> . input_list COMMA ID

    ID              shift and go to state 36

    input_list                     shift and go to state 35

state 21

    (16) output_declaration -> OUTPUT . ID SEMICOLON

    ID              shift and go to state 37


state 22

    (17) wire_declaration -> WIRE . wire_list SEMICOLON
    (18) wire_list -> . ID
    (19) wire_list -> . wire_list COMMA ID

    ID              shift and go to state 39

    wire_list                      shift and go to state 38

state 23

    (20) assign_statement -> ASSIGN . ID EQUALS expression SEMICOLON

    ID              shift and go to state 40


state 24

    (33) gate_instantiation -> gate_type . ID LPAREN signal_list RPAREN SEMICOLON

    ID              shift and go to state 41


state 25

    (34) gate_type -> AND .

    ID              reduce using rule 34 (gate_type -> AND .)


state 26

    (35) gate_type -> OR .

    ID              reduce using rule 35 (gate_type -> OR .)


state 27

    (36) gate_type -> NOT .

    ID              reduce using rule 36 (gate_type -> NOT .)


state 28

    (37) gate_type -> NAND .

    ID              reduce using rule 37 (gate_type -> NAND .)


state 29

    (38) gate_type -> NOR .

    ID              reduce using rule 38 (gate_type -> NOR .)


state 30

    (39) gate_type -> XOR .

    ID              reduce using rule 39 (gate_type -> XOR .)


state 31

    (40) gate_type -> XNOR .

    ID              reduce using rule 40 (gate_type -> XNOR .)


state 32

    (41) gate_type -> BUF .

    ID              reduce using rule 41 (gate_type -> BUF .)


state 33

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE .

    $end            reduce using rule 1 (module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE .)


state 34

    (6) module_items -> module_items module_item .

    ENDMODULE       reduce using rule 6 (module_items -> module_items module_item .)
    INPUT           reduce using rule 6 (module_items -> module_items module_item .)
    OUTPUT          reduce using rule 6 (module_items -> module_items module_item .)
    WIRE            reduce using rule 6 (module_items -> module_items module_item .)
    ASSIGN          reduce using rule 6 (module_items -> module_items module_item .)
    AND             reduce using rule 6 (module_items -> module_items module_item .)
    OR              reduce using rule 6 (module_items -> module_items module_item .)
    NOT             reduce using rule 6 (module_items -> module_items module_item .)
    NAND            reduce using rule 6 (module_items -> module_items module_item .)
    NOR             reduce using rule 6 (module_items -> module_items module_item .)
    XOR             reduce using rule 6 (module_items -> module_items module_item .)
    XNOR            reduce using rule 6 (module_items -> module_items module_item .)
    BUF             reduce using rule 6 (module_items -> module_items module_item .)


state 35

    (13) input_declaration -> INPUT input_list . SEMICOLON
    (15) input_list -> input_list . COMMA ID

    SEMICOLON       shift and go to state 42
    COMMA           shift and go to state 43


state 36

    (14) input_list -> ID .

    SEMICOLON       reduce using rule 14 (input_list -> ID .)
    COMMA           reduce using rule 14 (input_list -> ID .)


state 37

    (16) output_declaration -> OUTPUT ID . SEMICOLON

    SEMICOLON       shift and go to state 44


state 38

    (17) wire_declaration -> WIRE wire_list . SEMICOLON
    (19) wire_list -> wire_list . COMMA ID

    SEMICOLON       shift and go to state 45
    COMMA           shift and go to state 46


state 39

    (18) wire_list -> ID .

    SEMICOLON       reduce using rule 18 (wire_list -> ID .)
    COMMA           reduce using rule 18 (wire_list -> ID .)


state 40

    (20) assign_statement -> ASSIGN ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 47


state 41

    (33) gate_instantiation -> gate_type ID . LPAREN signal_list RPAREN SEMICOLON

    LPAREN          shift and go to state 48


state 42

    (13) input_declaration -> INPUT input_list SEMICOLON .

    ENDMODULE       reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    INPUT           reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    OUTPUT          reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    WIRE            reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    ASSIGN          reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    AND             reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    OR              reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    NOT             reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    NAND            reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    NOR             reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    XOR             reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    XNOR            reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)
    BUF             reduce using rule 13 (input_declaration -> INPUT input_list SEMICOLON .)


state 43

    (15) input_list -> input_list COMMA . ID

    ID              shift and go to state 49


state 44

    (16) output_declaration -> OUTPUT ID SEMICOLON .

    ENDMODULE       reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    INPUT           reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    OUTPUT          reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    WIRE            reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    ASSIGN          reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    AND             reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    OR              reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    NOT             reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    NAND            reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    NOR             reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    XOR             reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    XNOR            reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)
    BUF             reduce using rule 16 (output_declaration -> OUTPUT ID SEMICOLON .)


state 45

    (17) wire_declaration -> WIRE wire_list SEMICOLON .

    ENDMODULE       reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    INPUT           reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    OUTPUT          reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    WIRE            reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    ASSIGN          reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    AND             reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    OR              reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    NOT             reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    NAND            reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    NOR             reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    XOR             reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    XNOR            reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)
    BUF             reduce using rule 17 (wire_declaration -> WIRE wire_list SEMICOLON .)


state 46

    (19) wire_list -> wire_list COMMA . ID

    ID              shift and go to state 50


state 47

    (20) assign_statement -> ASSIGN ID EQUALS . expression SEMICOLON
    (21) expression -> . term
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . expression AMPERSAND term
    (25) expression -> . expression BAR term
    (26) expression -> . expression CARET term
    (27) expression -> . term QUESTION expression COLON expression
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    expression                     shift and go to state 52
    term                           shift and go to state 53

state 48

    (33) gate_instantiation -> gate_type ID LPAREN . signal_list RPAREN SEMICOLON
    (42) signal_list -> . ID
    (43) signal_list -> . signal_list COMMA ID

    ID              shift and go to state 57

    signal_list                    shift and go to state 58

state 49

    (15) input_list -> input_list COMMA ID .

    SEMICOLON       reduce using rule 15 (input_list -> input_list COMMA ID .)
    COMMA           reduce using rule 15 (input_list -> input_list COMMA ID .)


state 50

    (19) wire_list -> wire_list COMMA ID .

    SEMICOLON       reduce using rule 19 (wire_list -> wire_list COMMA ID .)
    COMMA           reduce using rule 19 (wire_list -> wire_list COMMA ID .)


state 51

    (28) term -> ID .

    QUESTION        reduce using rule 28 (term -> ID .)
    SEMICOLON       reduce using rule 28 (term -> ID .)
    PLUS            reduce using rule 28 (term -> ID .)
    MINUS           reduce using rule 28 (term -> ID .)
    AMPERSAND       reduce using rule 28 (term -> ID .)
    BAR             reduce using rule 28 (term -> ID .)
    CARET           reduce using rule 28 (term -> ID .)
    RPAREN          reduce using rule 28 (term -> ID .)
    COLON           reduce using rule 28 (term -> ID .)


state 52

    (20) assign_statement -> ASSIGN ID EQUALS expression . SEMICOLON
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (24) expression -> expression . AMPERSAND term
    (25) expression -> expression . BAR term
    (26) expression -> expression . CARET term

    SEMICOLON       shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 62
    BAR             shift and go to state 63
    CARET           shift and go to state 64


state 53

    (21) expression -> term .
    (27) expression -> term . QUESTION expression COLON expression

    SEMICOLON       reduce using rule 21 (expression -> term .)
    PLUS            reduce using rule 21 (expression -> term .)
    MINUS           reduce using rule 21 (expression -> term .)
    AMPERSAND       reduce using rule 21 (expression -> term .)
    BAR             reduce using rule 21 (expression -> term .)
    CARET           reduce using rule 21 (expression -> term .)
    RPAREN          reduce using rule 21 (expression -> term .)
    COLON           reduce using rule 21 (expression -> term .)
    QUESTION        shift and go to state 65


state 54

    (29) term -> NUMBER .

    QUESTION        reduce using rule 29 (term -> NUMBER .)
    SEMICOLON       reduce using rule 29 (term -> NUMBER .)
    PLUS            reduce using rule 29 (term -> NUMBER .)
    MINUS           reduce using rule 29 (term -> NUMBER .)
    AMPERSAND       reduce using rule 29 (term -> NUMBER .)
    BAR             reduce using rule 29 (term -> NUMBER .)
    CARET           reduce using rule 29 (term -> NUMBER .)
    RPAREN          reduce using rule 29 (term -> NUMBER .)
    COLON           reduce using rule 29 (term -> NUMBER .)


state 55

    (30) term -> LPAREN . expression RPAREN
    (21) expression -> . term
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . expression AMPERSAND term
    (25) expression -> . expression BAR term
    (26) expression -> . expression CARET term
    (27) expression -> . term QUESTION expression COLON expression
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    expression                     shift and go to state 66
    term                           shift and go to state 53

state 56

    (31) term -> TILDE . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 67

state 57

    (42) signal_list -> ID .

    RPAREN          reduce using rule 42 (signal_list -> ID .)
    COMMA           reduce using rule 42 (signal_list -> ID .)


state 58

    (33) gate_instantiation -> gate_type ID LPAREN signal_list . RPAREN SEMICOLON
    (43) signal_list -> signal_list . COMMA ID

    RPAREN          shift and go to state 68
    COMMA           shift and go to state 69


state 59

    (20) assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .

    ENDMODULE       reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    INPUT           reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    OUTPUT          reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    WIRE            reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    ASSIGN          reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    AND             reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    OR              reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NOT             reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NAND            reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NOR             reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    XOR             reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    XNOR            reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    BUF             reduce using rule 20 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)


state 60

    (22) expression -> expression PLUS . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 70

state 61

    (23) expression -> expression MINUS . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 71

state 62

    (24) expression -> expression AMPERSAND . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 72

state 63

    (25) expression -> expression BAR . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 73

state 64

    (26) expression -> expression CARET . term
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 74

state 65

    (27) expression -> term QUESTION . expression COLON expression
    (21) expression -> . term
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . expression AMPERSAND term
    (25) expression -> . expression BAR term
    (26) expression -> . expression CARET term
    (27) expression -> . term QUESTION expression COLON expression
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 53
    expression                     shift and go to state 75

state 66

    (30) term -> LPAREN expression . RPAREN
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (24) expression -> expression . AMPERSAND term
    (25) expression -> expression . BAR term
    (26) expression -> expression . CARET term

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 62
    BAR             shift and go to state 63
    CARET           shift and go to state 64


state 67

    (31) term -> TILDE term .

    QUESTION        reduce using rule 31 (term -> TILDE term .)
    SEMICOLON       reduce using rule 31 (term -> TILDE term .)
    PLUS            reduce using rule 31 (term -> TILDE term .)
    MINUS           reduce using rule 31 (term -> TILDE term .)
    AMPERSAND       reduce using rule 31 (term -> TILDE term .)
    BAR             reduce using rule 31 (term -> TILDE term .)
    CARET           reduce using rule 31 (term -> TILDE term .)
    RPAREN          reduce using rule 31 (term -> TILDE term .)
    COLON           reduce using rule 31 (term -> TILDE term .)


state 68

    (33) gate_instantiation -> gate_type ID LPAREN signal_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 77


state 69

    (43) signal_list -> signal_list COMMA . ID

    ID              shift and go to state 78


state 70

    (22) expression -> expression PLUS term .

    SEMICOLON       reduce using rule 22 (expression -> expression PLUS term .)
    PLUS            reduce using rule 22 (expression -> expression PLUS term .)
    MINUS           reduce using rule 22 (expression -> expression PLUS term .)
    AMPERSAND       reduce using rule 22 (expression -> expression PLUS term .)
    BAR             reduce using rule 22 (expression -> expression PLUS term .)
    CARET           reduce using rule 22 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 22 (expression -> expression PLUS term .)
    COLON           reduce using rule 22 (expression -> expression PLUS term .)


state 71

    (23) expression -> expression MINUS term .

    SEMICOLON       reduce using rule 23 (expression -> expression MINUS term .)
    PLUS            reduce using rule 23 (expression -> expression MINUS term .)
    MINUS           reduce using rule 23 (expression -> expression MINUS term .)
    AMPERSAND       reduce using rule 23 (expression -> expression MINUS term .)
    BAR             reduce using rule 23 (expression -> expression MINUS term .)
    CARET           reduce using rule 23 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 23 (expression -> expression MINUS term .)
    COLON           reduce using rule 23 (expression -> expression MINUS term .)


state 72

    (24) expression -> expression AMPERSAND term .

    SEMICOLON       reduce using rule 24 (expression -> expression AMPERSAND term .)
    PLUS            reduce using rule 24 (expression -> expression AMPERSAND term .)
    MINUS           reduce using rule 24 (expression -> expression AMPERSAND term .)
    AMPERSAND       reduce using rule 24 (expression -> expression AMPERSAND term .)
    BAR             reduce using rule 24 (expression -> expression AMPERSAND term .)
    CARET           reduce using rule 24 (expression -> expression AMPERSAND term .)
    RPAREN          reduce using rule 24 (expression -> expression AMPERSAND term .)
    COLON           reduce using rule 24 (expression -> expression AMPERSAND term .)


state 73

    (25) expression -> expression BAR term .

    SEMICOLON       reduce using rule 25 (expression -> expression BAR term .)
    PLUS            reduce using rule 25 (expression -> expression BAR term .)
    MINUS           reduce using rule 25 (expression -> expression BAR term .)
    AMPERSAND       reduce using rule 25 (expression -> expression BAR term .)
    BAR             reduce using rule 25 (expression -> expression BAR term .)
    CARET           reduce using rule 25 (expression -> expression BAR term .)
    RPAREN          reduce using rule 25 (expression -> expression BAR term .)
    COLON           reduce using rule 25 (expression -> expression BAR term .)


state 74

    (26) expression -> expression CARET term .

    SEMICOLON       reduce using rule 26 (expression -> expression CARET term .)
    PLUS            reduce using rule 26 (expression -> expression CARET term .)
    MINUS           reduce using rule 26 (expression -> expression CARET term .)
    AMPERSAND       reduce using rule 26 (expression -> expression CARET term .)
    BAR             reduce using rule 26 (expression -> expression CARET term .)
    CARET           reduce using rule 26 (expression -> expression CARET term .)
    RPAREN          reduce using rule 26 (expression -> expression CARET term .)
    COLON           reduce using rule 26 (expression -> expression CARET term .)


state 75

    (27) expression -> term QUESTION expression . COLON expression
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (24) expression -> expression . AMPERSAND term
    (25) expression -> expression . BAR term
    (26) expression -> expression . CARET term

    COLON           shift and go to state 79
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 62
    BAR             shift and go to state 63
    CARET           shift and go to state 64


state 76

    (30) term -> LPAREN expression RPAREN .

    QUESTION        reduce using rule 30 (term -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 30 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 30 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 30 (term -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 30 (term -> LPAREN expression RPAREN .)
    BAR             reduce using rule 30 (term -> LPAREN expression RPAREN .)
    CARET           reduce using rule 30 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 30 (term -> LPAREN expression RPAREN .)
    COLON           reduce using rule 30 (term -> LPAREN expression RPAREN .)


state 77

    (33) gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .

    ENDMODULE       reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    INPUT           reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    WIRE            reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    AND             reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    OR              reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NOT             reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NAND            reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NOR             reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    XOR             reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    XNOR            reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    BUF             reduce using rule 33 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)


state 78

    (43) signal_list -> signal_list COMMA ID .

    RPAREN          reduce using rule 43 (signal_list -> signal_list COMMA ID .)
    COMMA           reduce using rule 43 (signal_list -> signal_list COMMA ID .)


state 79

    (27) expression -> term QUESTION expression COLON . expression
    (21) expression -> . term
    (22) expression -> . expression PLUS term
    (23) expression -> . expression MINUS term
    (24) expression -> . expression AMPERSAND term
    (25) expression -> . expression BAR term
    (26) expression -> . expression CARET term
    (27) expression -> . term QUESTION expression COLON expression
    (28) term -> . ID
    (29) term -> . NUMBER
    (30) term -> . LPAREN expression RPAREN
    (31) term -> . TILDE term

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55
    TILDE           shift and go to state 56

    term                           shift and go to state 53
    expression                     shift and go to state 80

state 80

    (27) expression -> term QUESTION expression COLON expression .
    (22) expression -> expression . PLUS term
    (23) expression -> expression . MINUS term
    (24) expression -> expression . AMPERSAND term
    (25) expression -> expression . BAR term
    (26) expression -> expression . CARET term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for BAR resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> term QUESTION expression COLON expression .)
    RPAREN          reduce using rule 27 (expression -> term QUESTION expression COLON expression .)
    COLON           reduce using rule 27 (expression -> term QUESTION expression COLON expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    AMPERSAND       shift and go to state 62
    BAR             shift and go to state 63
    CARET           shift and go to state 64

  ! PLUS            [ reduce using rule 27 (expression -> term QUESTION expression COLON expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> term QUESTION expression COLON expression .) ]
  ! AMPERSAND       [ reduce using rule 27 (expression -> term QUESTION expression COLON expression .) ]
  ! BAR             [ reduce using rule 27 (expression -> term QUESTION expression COLON expression .) ]
  ! CARET           [ reduce using rule 27 (expression -> term QUESTION expression COLON expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INPUT in state 10 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 10 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 10 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 10 resolved as shift
WARNING: shift/reduce conflict for AND in state 10 resolved as shift
WARNING: shift/reduce conflict for OR in state 10 resolved as shift
WARNING: shift/reduce conflict for NOT in state 10 resolved as shift
WARNING: shift/reduce conflict for NAND in state 10 resolved as shift
WARNING: shift/reduce conflict for NOR in state 10 resolved as shift
WARNING: shift/reduce conflict for XOR in state 10 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 10 resolved as shift
WARNING: shift/reduce conflict for BUF in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 80 resolved as shift
WARNING: shift/reduce conflict for BAR in state 80 resolved as shift
WARNING: shift/reduce conflict for CARET in state 80 resolved as shift
