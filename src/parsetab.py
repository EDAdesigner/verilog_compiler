
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ASSIGN BAR BUF CARET COLON COMMA DIVIDE DOT ENDMODULE EQUALS ID INPUT LBRACE LBRACKET LPAREN MINUS MODULE NAND NOR NOT NUMBER OR OUTPUT PLUS QUESTION RBRACE RBRACKET REG RPAREN SEMICOLON TILDE TIMES WIRE XNOR XORmodule_definition : MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULEport_list : port_list_itemsport_list_items : port_item\n                         | port_list_items COMMA port_itemport_item : ID\n                     | WIRE IDmodule_items : module_item\n                       | module_items module_item\n                       | emptymodule_item : input_declaration\n                      | output_declaration\n                      | wire_declaration\n                      | assign_statement\n                      | gate_instantiationinput_declaration : INPUT input_list SEMICOLON\n                           | INPUT WIRE input_list SEMICOLONinput_list : ID\n                     | input_list COMMA IDoutput_declaration : OUTPUT output_list SEMICOLON\n                              | OUTPUT WIRE output_list SEMICOLONoutput_list : ID\n                      | output_list COMMA IDwire_declaration : WIRE wire_list SEMICOLONwire_list : ID\n                    | wire_list COMMA IDassign_statement : ASSIGN ID EQUALS expression SEMICOLONexpression : expression BAR xor_expr\n                      | xor_exprxor_expr : xor_expr CARET and_expr\n                    | and_exprand_expr : and_expr AMPERSAND add_expr\n                    | add_expradd_expr : add_expr PLUS term\n                    | add_expr MINUS term\n                    | termterm : ID\n                | NUMBER\n                | LPAREN expression RPAREN\n                | TILDE term\n                | term QUESTION expression COLON expressionempty :gate_instantiation : gate_type ID LPAREN signal_list RPAREN SEMICOLONgate_type : AND\n                    | OR\n                    | NOT\n                    | NAND\n                    | NOR\n                    | XOR\n                    | XNOR\n                    | BUFsignal_list : ID\n                      | signal_list COMMA ID'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,36,],[0,-1,]),'ID':([2,4,9,11,23,24,25,26,27,28,29,30,31,32,33,34,35,39,44,49,52,54,56,57,70,71,75,76,77,78,79,80,84,94,],[3,5,12,5,40,42,45,46,47,-43,-44,-45,-46,-47,-48,-49,-50,40,45,58,60,61,63,72,63,63,63,63,63,63,63,63,93,63,]),'LPAREN':([3,47,56,70,71,75,76,77,78,79,80,94,],[4,57,70,70,70,70,70,70,70,70,70,70,]),'WIRE':([4,11,13,15,16,17,18,19,20,21,22,23,25,37,48,51,53,59,62,74,92,],[9,9,24,24,-7,-9,-10,-11,-12,-13,-14,39,44,-8,-15,-23,-19,-16,-20,-26,-42,]),'COMMA':([5,7,8,12,14,38,40,41,42,43,45,50,55,58,60,61,72,73,93,],[-5,11,-3,-6,-4,49,-17,52,-24,54,-21,49,54,-18,-25,-22,-51,84,-52,]),'RPAREN':([5,6,7,8,12,14,63,65,66,67,68,69,72,73,81,82,85,86,87,88,89,91,93,95,],[-5,10,-2,-3,-6,-4,-36,-28,-30,-32,-35,-37,-51,83,91,-39,-27,-29,-31,-33,-34,-38,-52,-40,]),'SEMICOLON':([10,38,40,41,42,43,45,50,55,58,60,61,63,64,65,66,67,68,69,82,83,85,86,87,88,89,91,95,],[13,48,-17,51,-24,53,-21,59,62,-18,-25,-22,-36,74,-28,-30,-32,-35,-37,-39,92,-27,-29,-31,-33,-34,-38,-40,]),'ENDMODULE':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[-41,36,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'INPUT':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[23,23,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'OUTPUT':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[25,25,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'ASSIGN':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[26,26,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'AND':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[28,28,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'OR':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[29,29,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'NOT':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[30,30,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'NAND':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[31,31,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'NOR':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[32,32,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'XOR':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[33,33,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'XNOR':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[34,34,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'BUF':([13,15,16,17,18,19,20,21,22,37,48,51,53,59,62,74,92,],[35,35,-7,-9,-10,-11,-12,-13,-14,-8,-15,-23,-19,-16,-20,-26,-42,]),'EQUALS':([46,],[56,]),'NUMBER':([56,70,71,75,76,77,78,79,80,94,],[69,69,69,69,69,69,69,69,69,69,]),'TILDE':([56,70,71,75,76,77,78,79,80,94,],[71,71,71,71,71,71,71,71,71,71,]),'QUESTION':([63,65,66,67,68,69,82,85,86,87,88,89,91,95,],[-36,-28,-30,-32,80,-37,80,-27,-29,-31,80,80,-38,-40,]),'PLUS':([63,65,66,67,68,69,82,85,86,87,88,89,91,95,],[-36,-28,-30,78,-35,-37,-39,-27,-29,78,-33,-34,-38,-40,]),'MINUS':([63,65,66,67,68,69,82,85,86,87,88,89,91,95,],[-36,-28,-30,79,-35,-37,-39,-27,-29,79,-33,-34,-38,-40,]),'AMPERSAND':([63,65,66,67,68,69,82,85,86,87,88,89,91,95,],[-36,-28,77,-32,-35,-37,-39,-27,77,-31,-33,-34,-38,-40,]),'CARET':([63,65,66,67,68,69,82,85,86,87,88,89,91,95,],[-36,76,-30,-32,-35,-37,-39,76,-29,-31,-33,-34,-38,-40,]),'BAR':([63,64,65,66,67,68,69,81,82,85,86,87,88,89,90,91,95,],[-36,75,-28,-30,-32,-35,-37,75,-39,-27,-29,-31,-33,-34,75,-38,75,]),'COLON':([63,65,66,67,68,69,82,85,86,87,88,89,90,91,95,],[-36,-28,-30,-32,-35,-37,-39,-27,-29,-31,-33,-34,94,-38,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module_definition':([0,],[1,]),'port_list':([4,],[6,]),'port_list_items':([4,],[7,]),'port_item':([4,11,],[8,14,]),'module_items':([13,],[15,]),'module_item':([13,15,],[16,37,]),'empty':([13,],[17,]),'input_declaration':([13,15,],[18,18,]),'output_declaration':([13,15,],[19,19,]),'wire_declaration':([13,15,],[20,20,]),'assign_statement':([13,15,],[21,21,]),'gate_instantiation':([13,15,],[22,22,]),'gate_type':([13,15,],[27,27,]),'input_list':([23,39,],[38,50,]),'wire_list':([24,],[41,]),'output_list':([25,44,],[43,55,]),'expression':([56,70,80,94,],[64,81,90,95,]),'xor_expr':([56,70,75,80,94,],[65,65,85,65,65,]),'and_expr':([56,70,75,76,80,94,],[66,66,66,86,66,66,]),'add_expr':([56,70,75,76,77,80,94,],[67,67,67,67,87,67,67,]),'term':([56,70,71,75,76,77,78,79,80,94,],[68,68,82,68,68,68,88,89,68,68,]),'signal_list':([57,],[73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module_definition","S'",1,None,None,None),
  ('module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE','module_definition',8,'p_module_definition','verilog_parser.py',134),
  ('port_list -> port_list_items','port_list',1,'p_port_list','verilog_parser.py',145),
  ('port_list_items -> port_item','port_list_items',1,'p_port_list_items','verilog_parser.py',150),
  ('port_list_items -> port_list_items COMMA port_item','port_list_items',3,'p_port_list_items','verilog_parser.py',151),
  ('port_item -> ID','port_item',1,'p_port_item','verilog_parser.py',156),
  ('port_item -> WIRE ID','port_item',2,'p_port_item','verilog_parser.py',157),
  ('module_items -> module_item','module_items',1,'p_module_items','verilog_parser.py',172),
  ('module_items -> module_items module_item','module_items',2,'p_module_items','verilog_parser.py',173),
  ('module_items -> empty','module_items',1,'p_module_items','verilog_parser.py',174),
  ('module_item -> input_declaration','module_item',1,'p_module_item','verilog_parser.py',179),
  ('module_item -> output_declaration','module_item',1,'p_module_item','verilog_parser.py',180),
  ('module_item -> wire_declaration','module_item',1,'p_module_item','verilog_parser.py',181),
  ('module_item -> assign_statement','module_item',1,'p_module_item','verilog_parser.py',182),
  ('module_item -> gate_instantiation','module_item',1,'p_module_item','verilog_parser.py',183),
  ('input_declaration -> INPUT input_list SEMICOLON','input_declaration',3,'p_input_declaration','verilog_parser.py',188),
  ('input_declaration -> INPUT WIRE input_list SEMICOLON','input_declaration',4,'p_input_declaration','verilog_parser.py',189),
  ('input_list -> ID','input_list',1,'p_input_list','verilog_parser.py',194),
  ('input_list -> input_list COMMA ID','input_list',3,'p_input_list','verilog_parser.py',195),
  ('output_declaration -> OUTPUT output_list SEMICOLON','output_declaration',3,'p_output_declaration','verilog_parser.py',205),
  ('output_declaration -> OUTPUT WIRE output_list SEMICOLON','output_declaration',4,'p_output_declaration','verilog_parser.py',206),
  ('output_list -> ID','output_list',1,'p_output_list','verilog_parser.py',211),
  ('output_list -> output_list COMMA ID','output_list',3,'p_output_list','verilog_parser.py',212),
  ('wire_declaration -> WIRE wire_list SEMICOLON','wire_declaration',3,'p_wire_declaration','verilog_parser.py',222),
  ('wire_list -> ID','wire_list',1,'p_wire_list','verilog_parser.py',227),
  ('wire_list -> wire_list COMMA ID','wire_list',3,'p_wire_list','verilog_parser.py',228),
  ('assign_statement -> ASSIGN ID EQUALS expression SEMICOLON','assign_statement',5,'p_assign_statement','verilog_parser.py',246),
  ('expression -> expression BAR xor_expr','expression',3,'p_expression','verilog_parser.py',256),
  ('expression -> xor_expr','expression',1,'p_expression','verilog_parser.py',257),
  ('xor_expr -> xor_expr CARET and_expr','xor_expr',3,'p_xor_expr','verilog_parser.py',264),
  ('xor_expr -> and_expr','xor_expr',1,'p_xor_expr','verilog_parser.py',265),
  ('and_expr -> and_expr AMPERSAND add_expr','and_expr',3,'p_and_expr','verilog_parser.py',272),
  ('and_expr -> add_expr','and_expr',1,'p_and_expr','verilog_parser.py',273),
  ('add_expr -> add_expr PLUS term','add_expr',3,'p_add_expr','verilog_parser.py',280),
  ('add_expr -> add_expr MINUS term','add_expr',3,'p_add_expr','verilog_parser.py',281),
  ('add_expr -> term','add_expr',1,'p_add_expr','verilog_parser.py',282),
  ('term -> ID','term',1,'p_term','verilog_parser.py',292),
  ('term -> NUMBER','term',1,'p_term','verilog_parser.py',293),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','verilog_parser.py',294),
  ('term -> TILDE term','term',2,'p_term','verilog_parser.py',295),
  ('term -> term QUESTION expression COLON expression','term',5,'p_term','verilog_parser.py',296),
  ('empty -> <empty>','empty',0,'p_empty','verilog_parser.py',307),
  ('gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON','gate_instantiation',6,'p_gate_instantiation','verilog_parser.py',311),
  ('gate_type -> AND','gate_type',1,'p_gate_type','verilog_parser.py',320),
  ('gate_type -> OR','gate_type',1,'p_gate_type','verilog_parser.py',321),
  ('gate_type -> NOT','gate_type',1,'p_gate_type','verilog_parser.py',322),
  ('gate_type -> NAND','gate_type',1,'p_gate_type','verilog_parser.py',323),
  ('gate_type -> NOR','gate_type',1,'p_gate_type','verilog_parser.py',324),
  ('gate_type -> XOR','gate_type',1,'p_gate_type','verilog_parser.py',325),
  ('gate_type -> XNOR','gate_type',1,'p_gate_type','verilog_parser.py',326),
  ('gate_type -> BUF','gate_type',1,'p_gate_type','verilog_parser.py',327),
  ('signal_list -> ID','signal_list',1,'p_signal_list','verilog_parser.py',331),
  ('signal_list -> signal_list COMMA ID','signal_list',3,'p_signal_list','verilog_parser.py',332),
]
