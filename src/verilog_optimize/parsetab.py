
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ASSIGN BAR BUF CARET COLON COMMA DIVIDE DOT ENDMODULE EQUALS ID INPUT LBRACE LBRACKET LPAREN MINUS MODULE NAND NOR NOT NUMBER OR OUTPUT PLUS QUESTION RBRACE RBRACKET REG RPAREN SEMICOLON TILDE TIMES WIRE XNOR XORmodule_definition : MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULEport_list : port_item\n                    | port_item COMMA port_listport_item : IDdeclarations : declaration\n                       | declaration declarations\n                       | emptydeclaration : input_declaration\n                      | output_declaration\n                      | wire_declarationinput_declaration : INPUT port_list SEMICOLONoutput_declaration : OUTPUT port_list SEMICOLONwire_declaration : WIRE port_list SEMICOLONstatements : statement\n                     | statement statements\n                     | emptystatement : gate_instantiation\n                    | assign_statementgate_instantiation : gate_type ID LPAREN signal_list RPAREN SEMICOLONgate_type : AND\n                    | OR\n                    | NOT\n                    | NAND\n                    | NOR\n                    | XOR\n                    | XNOR\n                    | BUFsignal_list : ID\n                      | ID COMMA signal_listassign_statement : ASSIGN ID EQUALS expression SEMICOLONexpression : term\n                     | expression PLUS term\n                     | expression AMPERSAND termterm : ID\n               | NUMBER\n               | LPAREN expression RPARENempty :'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,40,],[0,-1,]),'ID':([2,4,9,18,19,20,26,27,28,29,30,31,32,33,34,35,47,48,55,56,59,60,],[3,5,5,5,5,5,42,43,-20,-21,-22,-23,-24,-25,-26,-27,49,51,51,49,51,51,]),'LPAREN':([3,42,48,55,59,60,],[4,47,55,55,55,55,]),'COMMA':([5,7,49,],[-4,9,56,]),'RPAREN':([5,6,7,11,49,50,51,53,54,61,62,64,65,66,],[-4,8,-2,-3,-28,57,-34,-31,-35,66,-29,-32,-33,-36,]),'SEMICOLON':([5,7,8,11,37,38,39,51,52,53,54,57,64,65,66,],[-4,-2,10,-3,44,45,46,-34,58,-31,-35,63,-32,-33,-36,]),'ASSIGN':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,27,-5,-7,-8,-9,-10,27,-17,-18,-6,-11,-12,-13,-30,-19,]),'AND':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,28,-5,-7,-8,-9,-10,28,-17,-18,-6,-11,-12,-13,-30,-19,]),'OR':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,29,-5,-7,-8,-9,-10,29,-17,-18,-6,-11,-12,-13,-30,-19,]),'NOT':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,30,-5,-7,-8,-9,-10,30,-17,-18,-6,-11,-12,-13,-30,-19,]),'NAND':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,31,-5,-7,-8,-9,-10,31,-17,-18,-6,-11,-12,-13,-30,-19,]),'NOR':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,32,-5,-7,-8,-9,-10,32,-17,-18,-6,-11,-12,-13,-30,-19,]),'XOR':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,33,-5,-7,-8,-9,-10,33,-17,-18,-6,-11,-12,-13,-30,-19,]),'XNOR':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,34,-5,-7,-8,-9,-10,34,-17,-18,-6,-11,-12,-13,-30,-19,]),'BUF':([10,12,13,14,15,16,17,22,24,25,36,44,45,46,58,63,],[-37,35,-5,-7,-8,-9,-10,35,-17,-18,-6,-11,-12,-13,-30,-19,]),'ENDMODULE':([10,12,13,14,15,16,17,21,22,23,24,25,36,41,44,45,46,58,63,],[-37,-37,-5,-7,-8,-9,-10,40,-14,-16,-17,-18,-6,-15,-11,-12,-13,-30,-19,]),'INPUT':([10,13,15,16,17,44,45,46,],[18,18,-8,-9,-10,-11,-12,-13,]),'OUTPUT':([10,13,15,16,17,44,45,46,],[19,19,-8,-9,-10,-11,-12,-13,]),'WIRE':([10,13,15,16,17,44,45,46,],[20,20,-8,-9,-10,-11,-12,-13,]),'EQUALS':([43,],[48,]),'NUMBER':([48,55,59,60,],[54,54,54,54,]),'PLUS':([51,52,53,54,61,64,65,66,],[-34,59,-31,-35,59,-32,-33,-36,]),'AMPERSAND':([51,52,53,54,61,64,65,66,],[-34,60,-31,-35,60,-32,-33,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module_definition':([0,],[1,]),'port_list':([4,9,18,19,20,],[6,11,37,38,39,]),'port_item':([4,9,18,19,20,],[7,7,7,7,7,]),'declarations':([10,13,],[12,36,]),'declaration':([10,13,],[13,13,]),'empty':([10,12,13,22,],[14,23,14,23,]),'input_declaration':([10,13,],[15,15,]),'output_declaration':([10,13,],[16,16,]),'wire_declaration':([10,13,],[17,17,]),'statements':([12,22,],[21,41,]),'statement':([12,22,],[22,22,]),'gate_instantiation':([12,22,],[24,24,]),'assign_statement':([12,22,],[25,25,]),'gate_type':([12,22,],[26,26,]),'signal_list':([47,56,],[50,62,]),'expression':([48,55,],[52,61,]),'term':([48,55,59,60,],[53,53,64,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module_definition","S'",1,None,None,None),
  ('module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE','module_definition',9,'p_module_definition','verilog_parser.py',37),
  ('port_list -> port_item','port_list',1,'p_port_list','verilog_parser.py',41),
  ('port_list -> port_item COMMA port_list','port_list',3,'p_port_list','verilog_parser.py',42),
  ('port_item -> ID','port_item',1,'p_port_item','verilog_parser.py',49),
  ('declarations -> declaration','declarations',1,'p_declarations','verilog_parser.py',53),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','verilog_parser.py',54),
  ('declarations -> empty','declarations',1,'p_declarations','verilog_parser.py',55),
  ('declaration -> input_declaration','declaration',1,'p_declaration','verilog_parser.py',59),
  ('declaration -> output_declaration','declaration',1,'p_declaration','verilog_parser.py',60),
  ('declaration -> wire_declaration','declaration',1,'p_declaration','verilog_parser.py',61),
  ('input_declaration -> INPUT port_list SEMICOLON','input_declaration',3,'p_input_declaration','verilog_parser.py',65),
  ('output_declaration -> OUTPUT port_list SEMICOLON','output_declaration',3,'p_output_declaration','verilog_parser.py',70),
  ('wire_declaration -> WIRE port_list SEMICOLON','wire_declaration',3,'p_wire_declaration','verilog_parser.py',75),
  ('statements -> statement','statements',1,'p_statements','verilog_parser.py',80),
  ('statements -> statement statements','statements',2,'p_statements','verilog_parser.py',81),
  ('statements -> empty','statements',1,'p_statements','verilog_parser.py',82),
  ('statement -> gate_instantiation','statement',1,'p_statement','verilog_parser.py',86),
  ('statement -> assign_statement','statement',1,'p_statement','verilog_parser.py',87),
  ('gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON','gate_instantiation',6,'p_gate_instantiation','verilog_parser.py',91),
  ('gate_type -> AND','gate_type',1,'p_gate_type','verilog_parser.py',104),
  ('gate_type -> OR','gate_type',1,'p_gate_type','verilog_parser.py',105),
  ('gate_type -> NOT','gate_type',1,'p_gate_type','verilog_parser.py',106),
  ('gate_type -> NAND','gate_type',1,'p_gate_type','verilog_parser.py',107),
  ('gate_type -> NOR','gate_type',1,'p_gate_type','verilog_parser.py',108),
  ('gate_type -> XOR','gate_type',1,'p_gate_type','verilog_parser.py',109),
  ('gate_type -> XNOR','gate_type',1,'p_gate_type','verilog_parser.py',110),
  ('gate_type -> BUF','gate_type',1,'p_gate_type','verilog_parser.py',111),
  ('signal_list -> ID','signal_list',1,'p_signal_list','verilog_parser.py',115),
  ('signal_list -> ID COMMA signal_list','signal_list',3,'p_signal_list','verilog_parser.py',116),
  ('assign_statement -> ASSIGN ID EQUALS expression SEMICOLON','assign_statement',5,'p_assign_statement','verilog_parser.py',169),
  ('expression -> term','expression',1,'p_expression','verilog_parser.py',182),
  ('expression -> expression PLUS term','expression',3,'p_expression','verilog_parser.py',183),
  ('expression -> expression AMPERSAND term','expression',3,'p_expression','verilog_parser.py',184),
  ('term -> ID','term',1,'p_term','verilog_parser.py',198),
  ('term -> NUMBER','term',1,'p_term','verilog_parser.py',199),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','verilog_parser.py',200),
  ('empty -> <empty>','empty',0,'p_empty','verilog_parser.py',207),
]
