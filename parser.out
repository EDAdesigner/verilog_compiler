Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BAR
    CARET
    COLON
    DIVIDE
    DOT
    LBRACE
    LBRACKET
    QUESTION
    RBRACE
    RBRACKET
    REG
    TIMES

Grammar

Rule 0     S' -> module_definition
Rule 1     module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE
Rule 2     port_list -> port_item
Rule 3     port_list -> port_item COMMA port_list
Rule 4     port_item -> ID
Rule 5     declarations -> declaration
Rule 6     declarations -> declaration declarations
Rule 7     declarations -> empty
Rule 8     declaration -> input_declaration
Rule 9     declaration -> output_declaration
Rule 10    declaration -> wire_declaration
Rule 11    input_declaration -> INPUT port_list SEMICOLON
Rule 12    output_declaration -> OUTPUT port_list SEMICOLON
Rule 13    wire_declaration -> WIRE port_list SEMICOLON
Rule 14    statements -> statement
Rule 15    statements -> statement statements
Rule 16    statements -> empty
Rule 17    statement -> gate_instantiation
Rule 18    statement -> assign_statement
Rule 19    gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON
Rule 20    gate_type -> AND
Rule 21    gate_type -> OR
Rule 22    gate_type -> NOT
Rule 23    gate_type -> NAND
Rule 24    gate_type -> NOR
Rule 25    gate_type -> XOR
Rule 26    gate_type -> XNOR
Rule 27    gate_type -> BUF
Rule 28    signal_list -> ID
Rule 29    signal_list -> ID COMMA signal_list
Rule 30    assign_statement -> ASSIGN ID EQUALS expression SEMICOLON
Rule 31    expression -> term
Rule 32    expression -> expression PLUS term
Rule 33    expression -> expression AMPERSAND term
Rule 34    term -> ID
Rule 35    term -> NUMBER
Rule 36    term -> LPAREN expression RPAREN
Rule 37    factor -> primary
Rule 38    factor -> TILDE primary
Rule 39    factor -> MINUS primary
Rule 40    primary -> ID
Rule 41    primary -> NUMBER
Rule 42    primary -> LPAREN expression RPAREN
Rule 43    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 33
AND                  : 20
ASSIGN               : 30
BAR                  : 
BUF                  : 27
CARET                : 
COLON                : 
COMMA                : 3 29
DIVIDE               : 
DOT                  : 
ENDMODULE            : 1
EQUALS               : 30
ID                   : 1 4 19 28 29 30 34 40
INPUT                : 11
LBRACE               : 
LBRACKET             : 
LPAREN               : 1 19 36 42
MINUS                : 39
MODULE               : 1
NAND                 : 23
NOR                  : 24
NOT                  : 22
NUMBER               : 35 41
OR                   : 21
OUTPUT               : 12
PLUS                 : 32
QUESTION             : 
RBRACE               : 
RBRACKET             : 
REG                  : 
RPAREN               : 1 19 36 42
SEMICOLON            : 1 11 12 13 19 30
TILDE                : 38
TIMES                : 
WIRE                 : 13
XNOR                 : 26
XOR                  : 25
error                : 

Nonterminals, with rules where they appear

assign_statement     : 18
declaration          : 5 6
declarations         : 1 6
empty                : 7 16
expression           : 30 32 33 36 42
factor               : 
gate_instantiation   : 17
gate_type            : 19
input_declaration    : 8
module_definition    : 0
output_declaration   : 9
port_item            : 2 3
port_list            : 1 3 11 12 13
primary              : 37 38 39
signal_list          : 19 29
statement            : 14 15
statements           : 1 15
term                 : 31 32 33
wire_declaration     : 10

Parsing method: LALR

state 0

    (0) S' -> . module_definition
    (1) module_definition -> . MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE

    MODULE          shift and go to state 2

    module_definition              shift and go to state 1

state 1

    (0) S' -> module_definition .



state 2

    (1) module_definition -> MODULE . ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE

    ID              shift and go to state 3


state 3

    (1) module_definition -> MODULE ID . LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE

    LPAREN          shift and go to state 4


state 4

    (1) module_definition -> MODULE ID LPAREN . port_list RPAREN SEMICOLON declarations statements ENDMODULE
    (2) port_list -> . port_item
    (3) port_list -> . port_item COMMA port_list
    (4) port_item -> . ID

    ID              shift and go to state 5

    port_list                      shift and go to state 6
    port_item                      shift and go to state 7

state 5

    (4) port_item -> ID .

    COMMA           reduce using rule 4 (port_item -> ID .)
    RPAREN          reduce using rule 4 (port_item -> ID .)
    SEMICOLON       reduce using rule 4 (port_item -> ID .)


state 6

    (1) module_definition -> MODULE ID LPAREN port_list . RPAREN SEMICOLON declarations statements ENDMODULE

    RPAREN          shift and go to state 8


state 7

    (2) port_list -> port_item .
    (3) port_list -> port_item . COMMA port_list

    RPAREN          reduce using rule 2 (port_list -> port_item .)
    SEMICOLON       reduce using rule 2 (port_list -> port_item .)
    COMMA           shift and go to state 9


state 8

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN . SEMICOLON declarations statements ENDMODULE

    SEMICOLON       shift and go to state 10


state 9

    (3) port_list -> port_item COMMA . port_list
    (2) port_list -> . port_item
    (3) port_list -> . port_item COMMA port_list
    (4) port_item -> . ID

    ID              shift and go to state 5

    port_item                      shift and go to state 7
    port_list                      shift and go to state 11

state 10

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON . declarations statements ENDMODULE
    (5) declarations -> . declaration
    (6) declarations -> . declaration declarations
    (7) declarations -> . empty
    (8) declaration -> . input_declaration
    (9) declaration -> . output_declaration
    (10) declaration -> . wire_declaration
    (43) empty -> .
    (11) input_declaration -> . INPUT port_list SEMICOLON
    (12) output_declaration -> . OUTPUT port_list SEMICOLON
    (13) wire_declaration -> . WIRE port_list SEMICOLON

    ASSIGN          reduce using rule 43 (empty -> .)
    AND             reduce using rule 43 (empty -> .)
    OR              reduce using rule 43 (empty -> .)
    NOT             reduce using rule 43 (empty -> .)
    NAND            reduce using rule 43 (empty -> .)
    NOR             reduce using rule 43 (empty -> .)
    XOR             reduce using rule 43 (empty -> .)
    XNOR            reduce using rule 43 (empty -> .)
    BUF             reduce using rule 43 (empty -> .)
    ENDMODULE       reduce using rule 43 (empty -> .)
    INPUT           shift and go to state 18
    OUTPUT          shift and go to state 19
    WIRE            shift and go to state 20

    declarations                   shift and go to state 12
    declaration                    shift and go to state 13
    empty                          shift and go to state 14
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17

state 11

    (3) port_list -> port_item COMMA port_list .

    RPAREN          reduce using rule 3 (port_list -> port_item COMMA port_list .)
    SEMICOLON       reduce using rule 3 (port_list -> port_item COMMA port_list .)


state 12

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations . statements ENDMODULE
    (14) statements -> . statement
    (15) statements -> . statement statements
    (16) statements -> . empty
    (17) statement -> . gate_instantiation
    (18) statement -> . assign_statement
    (43) empty -> .
    (19) gate_instantiation -> . gate_type ID LPAREN signal_list RPAREN SEMICOLON
    (30) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON
    (20) gate_type -> . AND
    (21) gate_type -> . OR
    (22) gate_type -> . NOT
    (23) gate_type -> . NAND
    (24) gate_type -> . NOR
    (25) gate_type -> . XOR
    (26) gate_type -> . XNOR
    (27) gate_type -> . BUF

    ENDMODULE       reduce using rule 43 (empty -> .)
    ASSIGN          shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    NOT             shift and go to state 30
    NAND            shift and go to state 31
    NOR             shift and go to state 32
    XOR             shift and go to state 33
    XNOR            shift and go to state 34
    BUF             shift and go to state 35

    statements                     shift and go to state 21
    statement                      shift and go to state 22
    empty                          shift and go to state 23
    gate_instantiation             shift and go to state 24
    assign_statement               shift and go to state 25
    gate_type                      shift and go to state 26

state 13

    (5) declarations -> declaration .
    (6) declarations -> declaration . declarations
    (5) declarations -> . declaration
    (6) declarations -> . declaration declarations
    (7) declarations -> . empty
    (8) declaration -> . input_declaration
    (9) declaration -> . output_declaration
    (10) declaration -> . wire_declaration
    (43) empty -> .
    (11) input_declaration -> . INPUT port_list SEMICOLON
    (12) output_declaration -> . OUTPUT port_list SEMICOLON
    (13) wire_declaration -> . WIRE port_list SEMICOLON

  ! reduce/reduce conflict for ASSIGN resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for AND resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for OR resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for NOT resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for NAND resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for NOR resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for XOR resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for XNOR resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for BUF resolved using rule 5 (declarations -> declaration .)
  ! reduce/reduce conflict for ENDMODULE resolved using rule 5 (declarations -> declaration .)
    ASSIGN          reduce using rule 5 (declarations -> declaration .)
    AND             reduce using rule 5 (declarations -> declaration .)
    OR              reduce using rule 5 (declarations -> declaration .)
    NOT             reduce using rule 5 (declarations -> declaration .)
    NAND            reduce using rule 5 (declarations -> declaration .)
    NOR             reduce using rule 5 (declarations -> declaration .)
    XOR             reduce using rule 5 (declarations -> declaration .)
    XNOR            reduce using rule 5 (declarations -> declaration .)
    BUF             reduce using rule 5 (declarations -> declaration .)
    ENDMODULE       reduce using rule 5 (declarations -> declaration .)
    INPUT           shift and go to state 18
    OUTPUT          shift and go to state 19
    WIRE            shift and go to state 20

  ! ASSIGN          [ reduce using rule 43 (empty -> .) ]
  ! AND             [ reduce using rule 43 (empty -> .) ]
  ! OR              [ reduce using rule 43 (empty -> .) ]
  ! NOT             [ reduce using rule 43 (empty -> .) ]
  ! NAND            [ reduce using rule 43 (empty -> .) ]
  ! NOR             [ reduce using rule 43 (empty -> .) ]
  ! XOR             [ reduce using rule 43 (empty -> .) ]
  ! XNOR            [ reduce using rule 43 (empty -> .) ]
  ! BUF             [ reduce using rule 43 (empty -> .) ]
  ! ENDMODULE       [ reduce using rule 43 (empty -> .) ]

    declaration                    shift and go to state 13
    declarations                   shift and go to state 36
    empty                          shift and go to state 14
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17

state 14

    (7) declarations -> empty .

    ASSIGN          reduce using rule 7 (declarations -> empty .)
    AND             reduce using rule 7 (declarations -> empty .)
    OR              reduce using rule 7 (declarations -> empty .)
    NOT             reduce using rule 7 (declarations -> empty .)
    NAND            reduce using rule 7 (declarations -> empty .)
    NOR             reduce using rule 7 (declarations -> empty .)
    XOR             reduce using rule 7 (declarations -> empty .)
    XNOR            reduce using rule 7 (declarations -> empty .)
    BUF             reduce using rule 7 (declarations -> empty .)
    ENDMODULE       reduce using rule 7 (declarations -> empty .)


state 15

    (8) declaration -> input_declaration .

    INPUT           reduce using rule 8 (declaration -> input_declaration .)
    OUTPUT          reduce using rule 8 (declaration -> input_declaration .)
    WIRE            reduce using rule 8 (declaration -> input_declaration .)
    ASSIGN          reduce using rule 8 (declaration -> input_declaration .)
    AND             reduce using rule 8 (declaration -> input_declaration .)
    OR              reduce using rule 8 (declaration -> input_declaration .)
    NOT             reduce using rule 8 (declaration -> input_declaration .)
    NAND            reduce using rule 8 (declaration -> input_declaration .)
    NOR             reduce using rule 8 (declaration -> input_declaration .)
    XOR             reduce using rule 8 (declaration -> input_declaration .)
    XNOR            reduce using rule 8 (declaration -> input_declaration .)
    BUF             reduce using rule 8 (declaration -> input_declaration .)
    ENDMODULE       reduce using rule 8 (declaration -> input_declaration .)


state 16

    (9) declaration -> output_declaration .

    INPUT           reduce using rule 9 (declaration -> output_declaration .)
    OUTPUT          reduce using rule 9 (declaration -> output_declaration .)
    WIRE            reduce using rule 9 (declaration -> output_declaration .)
    ASSIGN          reduce using rule 9 (declaration -> output_declaration .)
    AND             reduce using rule 9 (declaration -> output_declaration .)
    OR              reduce using rule 9 (declaration -> output_declaration .)
    NOT             reduce using rule 9 (declaration -> output_declaration .)
    NAND            reduce using rule 9 (declaration -> output_declaration .)
    NOR             reduce using rule 9 (declaration -> output_declaration .)
    XOR             reduce using rule 9 (declaration -> output_declaration .)
    XNOR            reduce using rule 9 (declaration -> output_declaration .)
    BUF             reduce using rule 9 (declaration -> output_declaration .)
    ENDMODULE       reduce using rule 9 (declaration -> output_declaration .)


state 17

    (10) declaration -> wire_declaration .

    INPUT           reduce using rule 10 (declaration -> wire_declaration .)
    OUTPUT          reduce using rule 10 (declaration -> wire_declaration .)
    WIRE            reduce using rule 10 (declaration -> wire_declaration .)
    ASSIGN          reduce using rule 10 (declaration -> wire_declaration .)
    AND             reduce using rule 10 (declaration -> wire_declaration .)
    OR              reduce using rule 10 (declaration -> wire_declaration .)
    NOT             reduce using rule 10 (declaration -> wire_declaration .)
    NAND            reduce using rule 10 (declaration -> wire_declaration .)
    NOR             reduce using rule 10 (declaration -> wire_declaration .)
    XOR             reduce using rule 10 (declaration -> wire_declaration .)
    XNOR            reduce using rule 10 (declaration -> wire_declaration .)
    BUF             reduce using rule 10 (declaration -> wire_declaration .)
    ENDMODULE       reduce using rule 10 (declaration -> wire_declaration .)


state 18

    (11) input_declaration -> INPUT . port_list SEMICOLON
    (2) port_list -> . port_item
    (3) port_list -> . port_item COMMA port_list
    (4) port_item -> . ID

    ID              shift and go to state 5

    port_list                      shift and go to state 37
    port_item                      shift and go to state 7

state 19

    (12) output_declaration -> OUTPUT . port_list SEMICOLON
    (2) port_list -> . port_item
    (3) port_list -> . port_item COMMA port_list
    (4) port_item -> . ID

    ID              shift and go to state 5

    port_list                      shift and go to state 38
    port_item                      shift and go to state 7

state 20

    (13) wire_declaration -> WIRE . port_list SEMICOLON
    (2) port_list -> . port_item
    (3) port_list -> . port_item COMMA port_list
    (4) port_item -> . ID

    ID              shift and go to state 5

    port_list                      shift and go to state 39
    port_item                      shift and go to state 7

state 21

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements . ENDMODULE

    ENDMODULE       shift and go to state 40


state 22

    (14) statements -> statement .
    (15) statements -> statement . statements
    (14) statements -> . statement
    (15) statements -> . statement statements
    (16) statements -> . empty
    (17) statement -> . gate_instantiation
    (18) statement -> . assign_statement
    (43) empty -> .
    (19) gate_instantiation -> . gate_type ID LPAREN signal_list RPAREN SEMICOLON
    (30) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON
    (20) gate_type -> . AND
    (21) gate_type -> . OR
    (22) gate_type -> . NOT
    (23) gate_type -> . NAND
    (24) gate_type -> . NOR
    (25) gate_type -> . XOR
    (26) gate_type -> . XNOR
    (27) gate_type -> . BUF

  ! reduce/reduce conflict for ENDMODULE resolved using rule 14 (statements -> statement .)
    ENDMODULE       reduce using rule 14 (statements -> statement .)
    ASSIGN          shift and go to state 27
    AND             shift and go to state 28
    OR              shift and go to state 29
    NOT             shift and go to state 30
    NAND            shift and go to state 31
    NOR             shift and go to state 32
    XOR             shift and go to state 33
    XNOR            shift and go to state 34
    BUF             shift and go to state 35

  ! ENDMODULE       [ reduce using rule 43 (empty -> .) ]

    statement                      shift and go to state 22
    statements                     shift and go to state 41
    empty                          shift and go to state 23
    gate_instantiation             shift and go to state 24
    assign_statement               shift and go to state 25
    gate_type                      shift and go to state 26

state 23

    (16) statements -> empty .

    ENDMODULE       reduce using rule 16 (statements -> empty .)


state 24

    (17) statement -> gate_instantiation .

    ASSIGN          reduce using rule 17 (statement -> gate_instantiation .)
    AND             reduce using rule 17 (statement -> gate_instantiation .)
    OR              reduce using rule 17 (statement -> gate_instantiation .)
    NOT             reduce using rule 17 (statement -> gate_instantiation .)
    NAND            reduce using rule 17 (statement -> gate_instantiation .)
    NOR             reduce using rule 17 (statement -> gate_instantiation .)
    XOR             reduce using rule 17 (statement -> gate_instantiation .)
    XNOR            reduce using rule 17 (statement -> gate_instantiation .)
    BUF             reduce using rule 17 (statement -> gate_instantiation .)
    ENDMODULE       reduce using rule 17 (statement -> gate_instantiation .)


state 25

    (18) statement -> assign_statement .

    ASSIGN          reduce using rule 18 (statement -> assign_statement .)
    AND             reduce using rule 18 (statement -> assign_statement .)
    OR              reduce using rule 18 (statement -> assign_statement .)
    NOT             reduce using rule 18 (statement -> assign_statement .)
    NAND            reduce using rule 18 (statement -> assign_statement .)
    NOR             reduce using rule 18 (statement -> assign_statement .)
    XOR             reduce using rule 18 (statement -> assign_statement .)
    XNOR            reduce using rule 18 (statement -> assign_statement .)
    BUF             reduce using rule 18 (statement -> assign_statement .)
    ENDMODULE       reduce using rule 18 (statement -> assign_statement .)


state 26

    (19) gate_instantiation -> gate_type . ID LPAREN signal_list RPAREN SEMICOLON

    ID              shift and go to state 42


state 27

    (30) assign_statement -> ASSIGN . ID EQUALS expression SEMICOLON

    ID              shift and go to state 43


state 28

    (20) gate_type -> AND .

    ID              reduce using rule 20 (gate_type -> AND .)


state 29

    (21) gate_type -> OR .

    ID              reduce using rule 21 (gate_type -> OR .)


state 30

    (22) gate_type -> NOT .

    ID              reduce using rule 22 (gate_type -> NOT .)


state 31

    (23) gate_type -> NAND .

    ID              reduce using rule 23 (gate_type -> NAND .)


state 32

    (24) gate_type -> NOR .

    ID              reduce using rule 24 (gate_type -> NOR .)


state 33

    (25) gate_type -> XOR .

    ID              reduce using rule 25 (gate_type -> XOR .)


state 34

    (26) gate_type -> XNOR .

    ID              reduce using rule 26 (gate_type -> XNOR .)


state 35

    (27) gate_type -> BUF .

    ID              reduce using rule 27 (gate_type -> BUF .)


state 36

    (6) declarations -> declaration declarations .

    ASSIGN          reduce using rule 6 (declarations -> declaration declarations .)
    AND             reduce using rule 6 (declarations -> declaration declarations .)
    OR              reduce using rule 6 (declarations -> declaration declarations .)
    NOT             reduce using rule 6 (declarations -> declaration declarations .)
    NAND            reduce using rule 6 (declarations -> declaration declarations .)
    NOR             reduce using rule 6 (declarations -> declaration declarations .)
    XOR             reduce using rule 6 (declarations -> declaration declarations .)
    XNOR            reduce using rule 6 (declarations -> declaration declarations .)
    BUF             reduce using rule 6 (declarations -> declaration declarations .)
    ENDMODULE       reduce using rule 6 (declarations -> declaration declarations .)


state 37

    (11) input_declaration -> INPUT port_list . SEMICOLON

    SEMICOLON       shift and go to state 44


state 38

    (12) output_declaration -> OUTPUT port_list . SEMICOLON

    SEMICOLON       shift and go to state 45


state 39

    (13) wire_declaration -> WIRE port_list . SEMICOLON

    SEMICOLON       shift and go to state 46


state 40

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE .

    $end            reduce using rule 1 (module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE .)


state 41

    (15) statements -> statement statements .

    ENDMODULE       reduce using rule 15 (statements -> statement statements .)


state 42

    (19) gate_instantiation -> gate_type ID . LPAREN signal_list RPAREN SEMICOLON

    LPAREN          shift and go to state 47


state 43

    (30) assign_statement -> ASSIGN ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 48


state 44

    (11) input_declaration -> INPUT port_list SEMICOLON .

    INPUT           reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    OUTPUT          reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    WIRE            reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    ASSIGN          reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    AND             reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    OR              reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    NOT             reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    NAND            reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    NOR             reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    XOR             reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    XNOR            reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    BUF             reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)
    ENDMODULE       reduce using rule 11 (input_declaration -> INPUT port_list SEMICOLON .)


state 45

    (12) output_declaration -> OUTPUT port_list SEMICOLON .

    INPUT           reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    OUTPUT          reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    WIRE            reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    ASSIGN          reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    AND             reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    OR              reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    NOT             reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    NAND            reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    NOR             reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    XOR             reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    XNOR            reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    BUF             reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)
    ENDMODULE       reduce using rule 12 (output_declaration -> OUTPUT port_list SEMICOLON .)


state 46

    (13) wire_declaration -> WIRE port_list SEMICOLON .

    INPUT           reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    OUTPUT          reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    WIRE            reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    ASSIGN          reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    AND             reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    OR              reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    NOT             reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    NAND            reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    NOR             reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    XOR             reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    XNOR            reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    BUF             reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)
    ENDMODULE       reduce using rule 13 (wire_declaration -> WIRE port_list SEMICOLON .)


state 47

    (19) gate_instantiation -> gate_type ID LPAREN . signal_list RPAREN SEMICOLON
    (28) signal_list -> . ID
    (29) signal_list -> . ID COMMA signal_list

    ID              shift and go to state 49

    signal_list                    shift and go to state 50

state 48

    (30) assign_statement -> ASSIGN ID EQUALS . expression SEMICOLON
    (31) expression -> . term
    (32) expression -> . expression PLUS term
    (33) expression -> . expression AMPERSAND term
    (34) term -> . ID
    (35) term -> . NUMBER
    (36) term -> . LPAREN expression RPAREN

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55

    expression                     shift and go to state 52
    term                           shift and go to state 53

state 49

    (28) signal_list -> ID .
    (29) signal_list -> ID . COMMA signal_list

    RPAREN          reduce using rule 28 (signal_list -> ID .)
    COMMA           shift and go to state 56


state 50

    (19) gate_instantiation -> gate_type ID LPAREN signal_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 57


state 51

    (34) term -> ID .

    SEMICOLON       reduce using rule 34 (term -> ID .)
    PLUS            reduce using rule 34 (term -> ID .)
    AMPERSAND       reduce using rule 34 (term -> ID .)
    RPAREN          reduce using rule 34 (term -> ID .)


state 52

    (30) assign_statement -> ASSIGN ID EQUALS expression . SEMICOLON
    (32) expression -> expression . PLUS term
    (33) expression -> expression . AMPERSAND term

    SEMICOLON       shift and go to state 58
    PLUS            shift and go to state 59
    AMPERSAND       shift and go to state 60


state 53

    (31) expression -> term .

    SEMICOLON       reduce using rule 31 (expression -> term .)
    PLUS            reduce using rule 31 (expression -> term .)
    AMPERSAND       reduce using rule 31 (expression -> term .)
    RPAREN          reduce using rule 31 (expression -> term .)


state 54

    (35) term -> NUMBER .

    SEMICOLON       reduce using rule 35 (term -> NUMBER .)
    PLUS            reduce using rule 35 (term -> NUMBER .)
    AMPERSAND       reduce using rule 35 (term -> NUMBER .)
    RPAREN          reduce using rule 35 (term -> NUMBER .)


state 55

    (36) term -> LPAREN . expression RPAREN
    (31) expression -> . term
    (32) expression -> . expression PLUS term
    (33) expression -> . expression AMPERSAND term
    (34) term -> . ID
    (35) term -> . NUMBER
    (36) term -> . LPAREN expression RPAREN

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55

    expression                     shift and go to state 61
    term                           shift and go to state 53

state 56

    (29) signal_list -> ID COMMA . signal_list
    (28) signal_list -> . ID
    (29) signal_list -> . ID COMMA signal_list

    ID              shift and go to state 49

    signal_list                    shift and go to state 62

state 57

    (19) gate_instantiation -> gate_type ID LPAREN signal_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 63


state 58

    (30) assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .

    ASSIGN          reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    AND             reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    OR              reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NOT             reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NAND            reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    NOR             reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    XOR             reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    XNOR            reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    BUF             reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    ENDMODULE       reduce using rule 30 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)


state 59

    (32) expression -> expression PLUS . term
    (34) term -> . ID
    (35) term -> . NUMBER
    (36) term -> . LPAREN expression RPAREN

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55

    term                           shift and go to state 64

state 60

    (33) expression -> expression AMPERSAND . term
    (34) term -> . ID
    (35) term -> . NUMBER
    (36) term -> . LPAREN expression RPAREN

    ID              shift and go to state 51
    NUMBER          shift and go to state 54
    LPAREN          shift and go to state 55

    term                           shift and go to state 65

state 61

    (36) term -> LPAREN expression . RPAREN
    (32) expression -> expression . PLUS term
    (33) expression -> expression . AMPERSAND term

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 59
    AMPERSAND       shift and go to state 60


state 62

    (29) signal_list -> ID COMMA signal_list .

    RPAREN          reduce using rule 29 (signal_list -> ID COMMA signal_list .)


state 63

    (19) gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .

    ASSIGN          reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    AND             reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    OR              reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NOT             reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NAND            reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    NOR             reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    XOR             reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    XNOR            reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    BUF             reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 19 (gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON .)


state 64

    (32) expression -> expression PLUS term .

    SEMICOLON       reduce using rule 32 (expression -> expression PLUS term .)
    PLUS            reduce using rule 32 (expression -> expression PLUS term .)
    AMPERSAND       reduce using rule 32 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 32 (expression -> expression PLUS term .)


state 65

    (33) expression -> expression AMPERSAND term .

    SEMICOLON       reduce using rule 33 (expression -> expression AMPERSAND term .)
    PLUS            reduce using rule 33 (expression -> expression AMPERSAND term .)
    AMPERSAND       reduce using rule 33 (expression -> expression AMPERSAND term .)
    RPAREN          reduce using rule 33 (expression -> expression AMPERSAND term .)


state 66

    (36) term -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 36 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 36 (term -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 36 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (term -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 13 resolved using rule (declarations -> declaration)
WARNING: rejected rule (empty -> <empty>) in state 13
WARNING: reduce/reduce conflict in state 22 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 22
