Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BAR
    BUF
    CARET
    COLON
    DIVIDE
    DOT
    LBRACE
    LBRACKET
    MINUS
    NAND
    NOR
    NOT
    OR
    QUESTION
    RBRACE
    RBRACKET
    REG
    TILDE
    TIMES
    XNOR
    XOR

Grammar

Rule 0     S' -> module_definition
Rule 1     module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE
Rule 2     port_list -> port_list_items
Rule 3     port_list_items -> ID
Rule 4     port_list_items -> port_list_items COMMA ID
Rule 5     module_items -> module_item
Rule 6     module_items -> module_items module_item
Rule 7     module_items -> empty
Rule 8     module_item -> input_declaration
Rule 9     module_item -> output_declaration
Rule 10    module_item -> wire_declaration
Rule 11    module_item -> assign_statement
Rule 12    input_declaration -> INPUT input_list SEMICOLON
Rule 13    input_list -> ID
Rule 14    input_list -> input_list COMMA ID
Rule 15    output_declaration -> OUTPUT ID SEMICOLON
Rule 16    wire_declaration -> WIRE wire_list SEMICOLON
Rule 17    wire_list -> ID
Rule 18    wire_list -> wire_list COMMA ID
Rule 19    assign_statement -> ASSIGN ID EQUALS expression SEMICOLON
Rule 20    expression -> term
Rule 21    expression -> expression PLUS term
Rule 22    expression -> expression AMPERSAND term
Rule 23    term -> ID
Rule 24    term -> NUMBER
Rule 25    term -> LPAREN expression RPAREN
Rule 26    empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 22
AND                  : 
ASSIGN               : 19
BAR                  : 
BUF                  : 
CARET                : 
COLON                : 
COMMA                : 4 14 18
DIVIDE               : 
DOT                  : 
ENDMODULE            : 1
EQUALS               : 19
ID                   : 1 3 4 13 14 15 17 18 19 23
INPUT                : 12
LBRACE               : 
LBRACKET             : 
LPAREN               : 1 25
MINUS                : 
MODULE               : 1
NAND                 : 
NOR                  : 
NOT                  : 
NUMBER               : 24
OR                   : 
OUTPUT               : 15
PLUS                 : 21
QUESTION             : 
RBRACE               : 
RBRACKET             : 
REG                  : 
RPAREN               : 1 25
SEMICOLON            : 1 12 15 16 19
TILDE                : 
TIMES                : 
WIRE                 : 16
XNOR                 : 
XOR                  : 
error                : 

Nonterminals, with rules where they appear

assign_statement     : 11
empty                : 7
expression           : 19 21 22 25
input_declaration    : 8
input_list           : 12 14
module_definition    : 0
module_item          : 5 6
module_items         : 1 6
output_declaration   : 9
port_list            : 1
port_list_items      : 2 4
term                 : 20 21 22
wire_declaration     : 10
wire_list            : 16 18

Parsing method: LALR

state 0

    (0) S' -> . module_definition
    (1) module_definition -> . MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    MODULE          shift and go to state 2

    module_definition              shift and go to state 1

state 1

    (0) S' -> module_definition .



state 2

    (1) module_definition -> MODULE . ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    ID              shift and go to state 3


state 3

    (1) module_definition -> MODULE ID . LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE

    LPAREN          shift and go to state 4


state 4

    (1) module_definition -> MODULE ID LPAREN . port_list RPAREN SEMICOLON module_items ENDMODULE
    (2) port_list -> . port_list_items
    (3) port_list_items -> . ID
    (4) port_list_items -> . port_list_items COMMA ID

    ID              shift and go to state 5

    port_list                      shift and go to state 6
    port_list_items                shift and go to state 7

state 5

    (3) port_list_items -> ID .

    COMMA           reduce using rule 3 (port_list_items -> ID .)
    RPAREN          reduce using rule 3 (port_list_items -> ID .)


state 6

    (1) module_definition -> MODULE ID LPAREN port_list . RPAREN SEMICOLON module_items ENDMODULE

    RPAREN          shift and go to state 8


state 7

    (2) port_list -> port_list_items .
    (4) port_list_items -> port_list_items . COMMA ID

    RPAREN          reduce using rule 2 (port_list -> port_list_items .)
    COMMA           shift and go to state 9


state 8

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN . SEMICOLON module_items ENDMODULE

    SEMICOLON       shift and go to state 10


state 9

    (4) port_list_items -> port_list_items COMMA . ID

    ID              shift and go to state 11


state 10

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON . module_items ENDMODULE
    (5) module_items -> . module_item
    (6) module_items -> . module_items module_item
    (7) module_items -> . empty
    (8) module_item -> . input_declaration
    (9) module_item -> . output_declaration
    (10) module_item -> . wire_declaration
    (11) module_item -> . assign_statement
    (26) empty -> .
    (12) input_declaration -> . INPUT input_list SEMICOLON
    (15) output_declaration -> . OUTPUT ID SEMICOLON
    (16) wire_declaration -> . WIRE wire_list SEMICOLON
    (19) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON

  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    ENDMODULE       reduce using rule 26 (empty -> .)
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    WIRE            shift and go to state 21
    ASSIGN          shift and go to state 22

  ! INPUT           [ reduce using rule 26 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 26 (empty -> .) ]
  ! WIRE            [ reduce using rule 26 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 26 (empty -> .) ]

    module_items                   shift and go to state 12
    module_item                    shift and go to state 13
    empty                          shift and go to state 14
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17
    assign_statement               shift and go to state 18

state 11

    (4) port_list_items -> port_list_items COMMA ID .

    COMMA           reduce using rule 4 (port_list_items -> port_list_items COMMA ID .)
    RPAREN          reduce using rule 4 (port_list_items -> port_list_items COMMA ID .)


state 12

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items . ENDMODULE
    (6) module_items -> module_items . module_item
    (8) module_item -> . input_declaration
    (9) module_item -> . output_declaration
    (10) module_item -> . wire_declaration
    (11) module_item -> . assign_statement
    (12) input_declaration -> . INPUT input_list SEMICOLON
    (15) output_declaration -> . OUTPUT ID SEMICOLON
    (16) wire_declaration -> . WIRE wire_list SEMICOLON
    (19) assign_statement -> . ASSIGN ID EQUALS expression SEMICOLON

    ENDMODULE       shift and go to state 23
    INPUT           shift and go to state 19
    OUTPUT          shift and go to state 20
    WIRE            shift and go to state 21
    ASSIGN          shift and go to state 22

    module_item                    shift and go to state 24
    input_declaration              shift and go to state 15
    output_declaration             shift and go to state 16
    wire_declaration               shift and go to state 17
    assign_statement               shift and go to state 18

state 13

    (5) module_items -> module_item .

    ENDMODULE       reduce using rule 5 (module_items -> module_item .)
    INPUT           reduce using rule 5 (module_items -> module_item .)
    OUTPUT          reduce using rule 5 (module_items -> module_item .)
    WIRE            reduce using rule 5 (module_items -> module_item .)
    ASSIGN          reduce using rule 5 (module_items -> module_item .)


state 14

    (7) module_items -> empty .

    ENDMODULE       reduce using rule 7 (module_items -> empty .)
    INPUT           reduce using rule 7 (module_items -> empty .)
    OUTPUT          reduce using rule 7 (module_items -> empty .)
    WIRE            reduce using rule 7 (module_items -> empty .)
    ASSIGN          reduce using rule 7 (module_items -> empty .)


state 15

    (8) module_item -> input_declaration .

    ENDMODULE       reduce using rule 8 (module_item -> input_declaration .)
    INPUT           reduce using rule 8 (module_item -> input_declaration .)
    OUTPUT          reduce using rule 8 (module_item -> input_declaration .)
    WIRE            reduce using rule 8 (module_item -> input_declaration .)
    ASSIGN          reduce using rule 8 (module_item -> input_declaration .)


state 16

    (9) module_item -> output_declaration .

    ENDMODULE       reduce using rule 9 (module_item -> output_declaration .)
    INPUT           reduce using rule 9 (module_item -> output_declaration .)
    OUTPUT          reduce using rule 9 (module_item -> output_declaration .)
    WIRE            reduce using rule 9 (module_item -> output_declaration .)
    ASSIGN          reduce using rule 9 (module_item -> output_declaration .)


state 17

    (10) module_item -> wire_declaration .

    ENDMODULE       reduce using rule 10 (module_item -> wire_declaration .)
    INPUT           reduce using rule 10 (module_item -> wire_declaration .)
    OUTPUT          reduce using rule 10 (module_item -> wire_declaration .)
    WIRE            reduce using rule 10 (module_item -> wire_declaration .)
    ASSIGN          reduce using rule 10 (module_item -> wire_declaration .)


state 18

    (11) module_item -> assign_statement .

    ENDMODULE       reduce using rule 11 (module_item -> assign_statement .)
    INPUT           reduce using rule 11 (module_item -> assign_statement .)
    OUTPUT          reduce using rule 11 (module_item -> assign_statement .)
    WIRE            reduce using rule 11 (module_item -> assign_statement .)
    ASSIGN          reduce using rule 11 (module_item -> assign_statement .)


state 19

    (12) input_declaration -> INPUT . input_list SEMICOLON
    (13) input_list -> . ID
    (14) input_list -> . input_list COMMA ID

    ID              shift and go to state 26

    input_list                     shift and go to state 25

state 20

    (15) output_declaration -> OUTPUT . ID SEMICOLON

    ID              shift and go to state 27


state 21

    (16) wire_declaration -> WIRE . wire_list SEMICOLON
    (17) wire_list -> . ID
    (18) wire_list -> . wire_list COMMA ID

    ID              shift and go to state 29

    wire_list                      shift and go to state 28

state 22

    (19) assign_statement -> ASSIGN . ID EQUALS expression SEMICOLON

    ID              shift and go to state 30


state 23

    (1) module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE .

    $end            reduce using rule 1 (module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON module_items ENDMODULE .)


state 24

    (6) module_items -> module_items module_item .

    ENDMODULE       reduce using rule 6 (module_items -> module_items module_item .)
    INPUT           reduce using rule 6 (module_items -> module_items module_item .)
    OUTPUT          reduce using rule 6 (module_items -> module_items module_item .)
    WIRE            reduce using rule 6 (module_items -> module_items module_item .)
    ASSIGN          reduce using rule 6 (module_items -> module_items module_item .)


state 25

    (12) input_declaration -> INPUT input_list . SEMICOLON
    (14) input_list -> input_list . COMMA ID

    SEMICOLON       shift and go to state 31
    COMMA           shift and go to state 32


state 26

    (13) input_list -> ID .

    SEMICOLON       reduce using rule 13 (input_list -> ID .)
    COMMA           reduce using rule 13 (input_list -> ID .)


state 27

    (15) output_declaration -> OUTPUT ID . SEMICOLON

    SEMICOLON       shift and go to state 33


state 28

    (16) wire_declaration -> WIRE wire_list . SEMICOLON
    (18) wire_list -> wire_list . COMMA ID

    SEMICOLON       shift and go to state 34
    COMMA           shift and go to state 35


state 29

    (17) wire_list -> ID .

    SEMICOLON       reduce using rule 17 (wire_list -> ID .)
    COMMA           reduce using rule 17 (wire_list -> ID .)


state 30

    (19) assign_statement -> ASSIGN ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 36


state 31

    (12) input_declaration -> INPUT input_list SEMICOLON .

    ENDMODULE       reduce using rule 12 (input_declaration -> INPUT input_list SEMICOLON .)
    INPUT           reduce using rule 12 (input_declaration -> INPUT input_list SEMICOLON .)
    OUTPUT          reduce using rule 12 (input_declaration -> INPUT input_list SEMICOLON .)
    WIRE            reduce using rule 12 (input_declaration -> INPUT input_list SEMICOLON .)
    ASSIGN          reduce using rule 12 (input_declaration -> INPUT input_list SEMICOLON .)


state 32

    (14) input_list -> input_list COMMA . ID

    ID              shift and go to state 37


state 33

    (15) output_declaration -> OUTPUT ID SEMICOLON .

    ENDMODULE       reduce using rule 15 (output_declaration -> OUTPUT ID SEMICOLON .)
    INPUT           reduce using rule 15 (output_declaration -> OUTPUT ID SEMICOLON .)
    OUTPUT          reduce using rule 15 (output_declaration -> OUTPUT ID SEMICOLON .)
    WIRE            reduce using rule 15 (output_declaration -> OUTPUT ID SEMICOLON .)
    ASSIGN          reduce using rule 15 (output_declaration -> OUTPUT ID SEMICOLON .)


state 34

    (16) wire_declaration -> WIRE wire_list SEMICOLON .

    ENDMODULE       reduce using rule 16 (wire_declaration -> WIRE wire_list SEMICOLON .)
    INPUT           reduce using rule 16 (wire_declaration -> WIRE wire_list SEMICOLON .)
    OUTPUT          reduce using rule 16 (wire_declaration -> WIRE wire_list SEMICOLON .)
    WIRE            reduce using rule 16 (wire_declaration -> WIRE wire_list SEMICOLON .)
    ASSIGN          reduce using rule 16 (wire_declaration -> WIRE wire_list SEMICOLON .)


state 35

    (18) wire_list -> wire_list COMMA . ID

    ID              shift and go to state 38


state 36

    (19) assign_statement -> ASSIGN ID EQUALS . expression SEMICOLON
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression AMPERSAND term
    (23) term -> . ID
    (24) term -> . NUMBER
    (25) term -> . LPAREN expression RPAREN

    ID              shift and go to state 39
    NUMBER          shift and go to state 42
    LPAREN          shift and go to state 43

    expression                     shift and go to state 40
    term                           shift and go to state 41

state 37

    (14) input_list -> input_list COMMA ID .

    SEMICOLON       reduce using rule 14 (input_list -> input_list COMMA ID .)
    COMMA           reduce using rule 14 (input_list -> input_list COMMA ID .)


state 38

    (18) wire_list -> wire_list COMMA ID .

    SEMICOLON       reduce using rule 18 (wire_list -> wire_list COMMA ID .)
    COMMA           reduce using rule 18 (wire_list -> wire_list COMMA ID .)


state 39

    (23) term -> ID .

    SEMICOLON       reduce using rule 23 (term -> ID .)
    PLUS            reduce using rule 23 (term -> ID .)
    AMPERSAND       reduce using rule 23 (term -> ID .)
    RPAREN          reduce using rule 23 (term -> ID .)


state 40

    (19) assign_statement -> ASSIGN ID EQUALS expression . SEMICOLON
    (21) expression -> expression . PLUS term
    (22) expression -> expression . AMPERSAND term

    SEMICOLON       shift and go to state 44
    PLUS            shift and go to state 45
    AMPERSAND       shift and go to state 46


state 41

    (20) expression -> term .

    SEMICOLON       reduce using rule 20 (expression -> term .)
    PLUS            reduce using rule 20 (expression -> term .)
    AMPERSAND       reduce using rule 20 (expression -> term .)
    RPAREN          reduce using rule 20 (expression -> term .)


state 42

    (24) term -> NUMBER .

    SEMICOLON       reduce using rule 24 (term -> NUMBER .)
    PLUS            reduce using rule 24 (term -> NUMBER .)
    AMPERSAND       reduce using rule 24 (term -> NUMBER .)
    RPAREN          reduce using rule 24 (term -> NUMBER .)


state 43

    (25) term -> LPAREN . expression RPAREN
    (20) expression -> . term
    (21) expression -> . expression PLUS term
    (22) expression -> . expression AMPERSAND term
    (23) term -> . ID
    (24) term -> . NUMBER
    (25) term -> . LPAREN expression RPAREN

    ID              shift and go to state 39
    NUMBER          shift and go to state 42
    LPAREN          shift and go to state 43

    expression                     shift and go to state 47
    term                           shift and go to state 41

state 44

    (19) assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .

    ENDMODULE       reduce using rule 19 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    INPUT           reduce using rule 19 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    OUTPUT          reduce using rule 19 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    WIRE            reduce using rule 19 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)
    ASSIGN          reduce using rule 19 (assign_statement -> ASSIGN ID EQUALS expression SEMICOLON .)


state 45

    (21) expression -> expression PLUS . term
    (23) term -> . ID
    (24) term -> . NUMBER
    (25) term -> . LPAREN expression RPAREN

    ID              shift and go to state 39
    NUMBER          shift and go to state 42
    LPAREN          shift and go to state 43

    term                           shift and go to state 48

state 46

    (22) expression -> expression AMPERSAND . term
    (23) term -> . ID
    (24) term -> . NUMBER
    (25) term -> . LPAREN expression RPAREN

    ID              shift and go to state 39
    NUMBER          shift and go to state 42
    LPAREN          shift and go to state 43

    term                           shift and go to state 49

state 47

    (25) term -> LPAREN expression . RPAREN
    (21) expression -> expression . PLUS term
    (22) expression -> expression . AMPERSAND term

    RPAREN          shift and go to state 50
    PLUS            shift and go to state 45
    AMPERSAND       shift and go to state 46


state 48

    (21) expression -> expression PLUS term .

    SEMICOLON       reduce using rule 21 (expression -> expression PLUS term .)
    PLUS            reduce using rule 21 (expression -> expression PLUS term .)
    AMPERSAND       reduce using rule 21 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 21 (expression -> expression PLUS term .)


state 49

    (22) expression -> expression AMPERSAND term .

    SEMICOLON       reduce using rule 22 (expression -> expression AMPERSAND term .)
    PLUS            reduce using rule 22 (expression -> expression AMPERSAND term .)
    AMPERSAND       reduce using rule 22 (expression -> expression AMPERSAND term .)
    RPAREN          reduce using rule 22 (expression -> expression AMPERSAND term .)


state 50

    (25) term -> LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 25 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 25 (term -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 25 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 25 (term -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INPUT in state 10 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 10 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 10 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 10 resolved as shift
