
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ASSIGN BAR BUF CARET COLON COMMA DIVIDE DOT ENDMODULE EQUALS ID INPUT LBRACE LBRACKET LPAREN MINUS MODULE NAND NOR NOT NUMBER OR OUTPUT PLUS QUESTION RBRACE RBRACKET REG RPAREN SEMICOLON TILDE TIMES WIRE XNOR XORmodule_definition : MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULEport_list : ID\n                    | ID COMMA port_listdeclarations : declaration\n                       | declaration declarations\n                       | emptydeclaration : input_declaration\n                      | output_declaration\n                      | wire_declarationinput_declaration : INPUT ID SEMICOLON\n                           | INPUT LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLONoutput_declaration : OUTPUT ID SEMICOLON\n                             | OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLONwire_declaration : WIRE ID SEMICOLON\n                          | WIRE LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLONstatements : statement\n                     | statement statements\n                     | emptystatement : gate_instantiation\n                    | assign_statementgate_instantiation : gate_type ID LPAREN signal_list RPAREN SEMICOLONgate_type : AND\n                    | OR\n                    | NOT\n                    | NAND\n                    | NOR\n                    | XOR\n                    | XNOR\n                    | BUFsignal_list : ID\n                      | ID COMMA signal_listassign_statement : ASSIGN ID EQUALS expression SEMICOLON\n                          | ASSIGN ID LBRACKET NUMBER RBRACKET EQUALS expression SEMICOLONexpression : term\n                     | term PLUS expression\n                     | term MINUS expression\n                     | term AMPERSAND expression\n                     | term BAR expression\n                     | term CARET expressionterm : factor\n                | factor TIMES term\n                | factor DIVIDE termfactor : primary\n                 | TILDE primary\n                 | MINUS primaryprimary : ID\n                  | NUMBER\n                  | LPAREN expression RPARENempty :'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,42,],[0,-1,]),'ID':([2,4,7,17,18,19,25,26,27,28,29,30,31,32,33,34,52,53,63,66,68,73,76,77,78,79,80,82,83,87,88,89,100,],[3,5,5,36,38,40,44,45,-22,-23,-24,-25,-26,-27,-28,-29,58,60,60,60,60,58,60,60,60,60,60,60,60,101,102,103,60,]),'LPAREN':([3,44,53,63,66,68,76,77,78,79,80,82,83,100,],[4,52,68,68,68,68,68,68,68,68,68,68,68,68,]),'RPAREN':([5,6,9,58,59,60,62,64,65,67,81,84,85,90,92,93,94,95,96,97,98,99,],[-2,8,-3,-30,74,-46,-34,-40,-43,-47,-45,-44,99,-31,-35,-36,-37,-38,-39,-41,-42,-48,]),'COMMA':([5,58,],[7,73,]),'SEMICOLON':([8,36,38,40,60,61,62,64,65,67,74,81,84,92,93,94,95,96,97,98,99,101,102,103,104,],[10,46,48,50,-46,75,-34,-40,-43,-47,91,-45,-44,-35,-36,-37,-38,-39,-41,-42,-48,105,106,107,108,]),'ASSIGN':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,26,-4,-6,-7,-8,-9,26,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'AND':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,27,-4,-6,-7,-8,-9,27,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'OR':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,28,-4,-6,-7,-8,-9,28,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'NOT':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,29,-4,-6,-7,-8,-9,29,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'NAND':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,30,-4,-6,-7,-8,-9,30,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'NOR':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,31,-4,-6,-7,-8,-9,31,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'XOR':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,32,-4,-6,-7,-8,-9,32,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'XNOR':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,33,-4,-6,-7,-8,-9,33,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'BUF':([10,11,12,13,14,15,16,21,23,24,35,46,48,50,75,91,105,106,107,108,],[-49,34,-4,-6,-7,-8,-9,34,-19,-20,-5,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'ENDMODULE':([10,11,12,13,14,15,16,20,21,22,23,24,35,43,46,48,50,75,91,105,106,107,108,],[-49,-49,-4,-6,-7,-8,-9,42,-16,-18,-19,-20,-5,-17,-10,-12,-14,-32,-21,-11,-13,-15,-33,]),'INPUT':([10,12,14,15,16,46,48,50,105,106,107,],[17,17,-7,-8,-9,-10,-12,-14,-11,-13,-15,]),'OUTPUT':([10,12,14,15,16,46,48,50,105,106,107,],[18,18,-7,-8,-9,-10,-12,-14,-11,-13,-15,]),'WIRE':([10,12,14,15,16,46,48,50,105,106,107,],[19,19,-7,-8,-9,-10,-12,-14,-11,-13,-15,]),'LBRACKET':([17,18,19,45,],[37,39,41,54,]),'NUMBER':([37,39,41,53,54,55,56,57,63,66,68,76,77,78,79,80,82,83,100,],[47,49,51,67,69,70,71,72,67,67,67,67,67,67,67,67,67,67,67,]),'EQUALS':([45,86,],[53,100,]),'COLON':([47,49,51,],[55,56,57,]),'TILDE':([53,68,76,77,78,79,80,82,83,100,],[66,66,66,66,66,66,66,66,66,66,]),'MINUS':([53,60,62,64,65,67,68,76,77,78,79,80,81,82,83,84,97,98,99,100,],[63,-46,77,-40,-43,-47,63,63,63,63,63,63,-45,63,63,-44,-41,-42,-48,63,]),'TIMES':([60,64,65,67,81,84,99,],[-46,82,-43,-47,-45,-44,-48,]),'DIVIDE':([60,64,65,67,81,84,99,],[-46,83,-43,-47,-45,-44,-48,]),'PLUS':([60,62,64,65,67,81,84,97,98,99,],[-46,76,-40,-43,-47,-45,-44,-41,-42,-48,]),'AMPERSAND':([60,62,64,65,67,81,84,97,98,99,],[-46,78,-40,-43,-47,-45,-44,-41,-42,-48,]),'BAR':([60,62,64,65,67,81,84,97,98,99,],[-46,79,-40,-43,-47,-45,-44,-41,-42,-48,]),'CARET':([60,62,64,65,67,81,84,97,98,99,],[-46,80,-40,-43,-47,-45,-44,-41,-42,-48,]),'RBRACKET':([69,70,71,72,],[86,87,88,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module_definition':([0,],[1,]),'port_list':([4,7,],[6,9,]),'declarations':([10,12,],[11,35,]),'declaration':([10,12,],[12,12,]),'empty':([10,11,12,21,],[13,22,13,22,]),'input_declaration':([10,12,],[14,14,]),'output_declaration':([10,12,],[15,15,]),'wire_declaration':([10,12,],[16,16,]),'statements':([11,21,],[20,43,]),'statement':([11,21,],[21,21,]),'gate_instantiation':([11,21,],[23,23,]),'assign_statement':([11,21,],[24,24,]),'gate_type':([11,21,],[25,25,]),'signal_list':([52,73,],[59,90,]),'expression':([53,68,76,77,78,79,80,100,],[61,85,92,93,94,95,96,104,]),'term':([53,68,76,77,78,79,80,82,83,100,],[62,62,62,62,62,62,62,97,98,62,]),'factor':([53,68,76,77,78,79,80,82,83,100,],[64,64,64,64,64,64,64,64,64,64,]),'primary':([53,63,66,68,76,77,78,79,80,82,83,100,],[65,81,84,65,65,65,65,65,65,65,65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module_definition","S'",1,None,None,None),
  ('module_definition -> MODULE ID LPAREN port_list RPAREN SEMICOLON declarations statements ENDMODULE','module_definition',9,'p_module_definition','verilog_parser.py',34),
  ('port_list -> ID','port_list',1,'p_port_list','verilog_parser.py',38),
  ('port_list -> ID COMMA port_list','port_list',3,'p_port_list','verilog_parser.py',39),
  ('declarations -> declaration','declarations',1,'p_declarations','verilog_parser.py',44),
  ('declarations -> declaration declarations','declarations',2,'p_declarations','verilog_parser.py',45),
  ('declarations -> empty','declarations',1,'p_declarations','verilog_parser.py',46),
  ('declaration -> input_declaration','declaration',1,'p_declaration','verilog_parser.py',50),
  ('declaration -> output_declaration','declaration',1,'p_declaration','verilog_parser.py',51),
  ('declaration -> wire_declaration','declaration',1,'p_declaration','verilog_parser.py',52),
  ('input_declaration -> INPUT ID SEMICOLON','input_declaration',3,'p_input_declaration','verilog_parser.py',56),
  ('input_declaration -> INPUT LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLON','input_declaration',8,'p_input_declaration','verilog_parser.py',57),
  ('output_declaration -> OUTPUT ID SEMICOLON','output_declaration',3,'p_output_declaration','verilog_parser.py',66),
  ('output_declaration -> OUTPUT LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLON','output_declaration',8,'p_output_declaration','verilog_parser.py',67),
  ('wire_declaration -> WIRE ID SEMICOLON','wire_declaration',3,'p_wire_declaration','verilog_parser.py',76),
  ('wire_declaration -> WIRE LBRACKET NUMBER COLON NUMBER RBRACKET ID SEMICOLON','wire_declaration',8,'p_wire_declaration','verilog_parser.py',77),
  ('statements -> statement','statements',1,'p_statements','verilog_parser.py',86),
  ('statements -> statement statements','statements',2,'p_statements','verilog_parser.py',87),
  ('statements -> empty','statements',1,'p_statements','verilog_parser.py',88),
  ('statement -> gate_instantiation','statement',1,'p_statement','verilog_parser.py',92),
  ('statement -> assign_statement','statement',1,'p_statement','verilog_parser.py',93),
  ('gate_instantiation -> gate_type ID LPAREN signal_list RPAREN SEMICOLON','gate_instantiation',6,'p_gate_instantiation','verilog_parser.py',97),
  ('gate_type -> AND','gate_type',1,'p_gate_type','verilog_parser.py',110),
  ('gate_type -> OR','gate_type',1,'p_gate_type','verilog_parser.py',111),
  ('gate_type -> NOT','gate_type',1,'p_gate_type','verilog_parser.py',112),
  ('gate_type -> NAND','gate_type',1,'p_gate_type','verilog_parser.py',113),
  ('gate_type -> NOR','gate_type',1,'p_gate_type','verilog_parser.py',114),
  ('gate_type -> XOR','gate_type',1,'p_gate_type','verilog_parser.py',115),
  ('gate_type -> XNOR','gate_type',1,'p_gate_type','verilog_parser.py',116),
  ('gate_type -> BUF','gate_type',1,'p_gate_type','verilog_parser.py',117),
  ('signal_list -> ID','signal_list',1,'p_signal_list','verilog_parser.py',121),
  ('signal_list -> ID COMMA signal_list','signal_list',3,'p_signal_list','verilog_parser.py',122),
  ('assign_statement -> ASSIGN ID EQUALS expression SEMICOLON','assign_statement',5,'p_assign_statement','verilog_parser.py',129),
  ('assign_statement -> ASSIGN ID LBRACKET NUMBER RBRACKET EQUALS expression SEMICOLON','assign_statement',8,'p_assign_statement','verilog_parser.py',130),
  ('expression -> term','expression',1,'p_expression','verilog_parser.py',142),
  ('expression -> term PLUS expression','expression',3,'p_expression','verilog_parser.py',143),
  ('expression -> term MINUS expression','expression',3,'p_expression','verilog_parser.py',144),
  ('expression -> term AMPERSAND expression','expression',3,'p_expression','verilog_parser.py',145),
  ('expression -> term BAR expression','expression',3,'p_expression','verilog_parser.py',146),
  ('expression -> term CARET expression','expression',3,'p_expression','verilog_parser.py',147),
  ('term -> factor','term',1,'p_term','verilog_parser.py',154),
  ('term -> factor TIMES term','term',3,'p_term','verilog_parser.py',155),
  ('term -> factor DIVIDE term','term',3,'p_term','verilog_parser.py',156),
  ('factor -> primary','factor',1,'p_factor','verilog_parser.py',163),
  ('factor -> TILDE primary','factor',2,'p_factor','verilog_parser.py',164),
  ('factor -> MINUS primary','factor',2,'p_factor','verilog_parser.py',165),
  ('primary -> ID','primary',1,'p_primary','verilog_parser.py',172),
  ('primary -> NUMBER','primary',1,'p_primary','verilog_parser.py',173),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary','verilog_parser.py',174),
  ('empty -> <empty>','empty',0,'p_empty','verilog_parser.py',181),
]
